Перем мВалютаРегламентированногоУчета Экспорт;

Функция ПодготовитьДанныеДляПечатиТОРГ12(БезУслуг = Ложь)
	
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	Организация,
	|	Организация КАК ЮрФизЛицо,
	|	Организация КАК Поставщик,
	|	Склад КАК Склад,
	|	Организация КАК Контрагент,
	|	Организация КАК Руководители,
	|	АдресДоставки КАК АдресДоставки,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент КАК Покупатель,
	|	Контрагент КАК Плательщик,
	|	""Договор""    КАК Основание,
	|	ЕСТЬNULL(ДоговорКонтрагента.Дата, ДАТАВРЕМЯ(1,1,1)) КАК ОснованиеДата,
	|	ЕСТЬNULL(ДоговорКонтрагента.Номер, """")            КАК ОснованиеНомер,
	|	ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаШапки = Запрос.Выполнить().Выгрузить();
	Если ТаблицаШапки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаШапки[0]);
	КонецЕсли;
	
	//Дополним шапку
	ПодразделениеОтветственныхЛиц = Неопределено;
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	СформироватьСтруктуруПодписейДляПечати(Руководители, Шапка.Руководители, Шапка.ДатаДокумента, Шапка);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Курс",            ЗаполнениеДокументов.КурсДокумента(СсылкаНаОбъект,      мВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(СсылкаНаОбъект, мВалютаРегламентированногоУчета));
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки КАК Номер,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество,
	|	РеализацияТоваровУслуг.КоличествоМест,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ВидУпаковки,
	|	РеализацияТоваровУслуг.Коэффициент,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность КАК Цена,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.Сумма  КАК СуммаВВалютеДокумента,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	1 КАК ID,
	|	ЕстьNull(РеализацияТоваровУслуг.КоличествоМест,РеализацияТоваровУслуг.Количество) * РеализацияТоваровУслуг.ЕдиницаИзмерения.Вес КАК МассаБрутто
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ";
	
	Если НЕ БезУслуг Тогда
		Текст = Текст +"
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки,
		|	РеализацияТоваровУслуг.Номенклатура,
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	РеализацияТоваровУслуг.Номенклатура.Код,
		|	РеализацияТоваровУслуг.Количество,
		|	0,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	0,
		|	0,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	3, NULL
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.НомерСтроки,
		|	РеализацияТоваровУслуг.Номенклатура,
		|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
		|	РеализацияТоваровУслуг.Номенклатура.Код,
		|	РеализацияТоваровУслуг.Количество,
		|	0,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения,
		|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	0,
		|	0,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность,
		|	РеализацияТоваровУслуг.Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС,
		|	РеализацияТоваровУслуг.СтавкаНДС,
		|	4, NULL
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ";
	КонецЕсли;
	Текст = Текст +"
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)),
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	0,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность,
	|	0,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	NULL,
	|	2, NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Номер";
	Запрос.Текст = Текст;
	
	Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код","Номенклатура.Артикул");
	КонецЕсли;
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Если СсылкаНаОбъект.Проведен И (Шапка.РасчетыВУсловныхЕдиницах
		ИЛИ (Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета И СсылкаНаОбъект.Дата >= '20090101000000')) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СсылкаНаОбъект.СчетУчетаРасчетовСКонтрагентом);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугТовары.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ГДЕ
		|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		Если НЕ БезУслуг Тогда
			Текст = Текст +"
			|
			|           ОБЪЕДИНИТЬ
			|
			|			ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				РеализацияТоваровУслугУслуги.СчетДоходов
			|			ИЗ
			|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|			ГДЕ
			|				РеализацияТоваровУслугУслуги.Ссылка = &Ссылка)";
		Иначе
			Текст = Текст +") И Хозрасчетный.Содержание <> &Содержание";
			Запрос.УстановитьПараметр("Содержание", "Реализация услуг");
		КонецЕсли;
		Запрос.Текст = Текст;
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.ДатаДокумента);
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
			
			ЗапросТовары.Колонки.Добавить("СуммаБезНДС");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ЗапросТовары Цикл
				Если (СтрокаТовар.ID = 2) Тогда
					МассивРаспределения.Добавить(0);
					СтрокаТовар.СуммаБезНДС = 0;
				Иначе
					СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
					СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;

					МассивРаспределения.Добавить(СуммаСНДС);
					СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
				КонецЕсли;
			КонецЦикла;
			
			ЗапросТовары.Колонки.Добавить("СуммаРублевая");
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ЗапросТовары, "СуммаРублевая");
			
			Для Каждого СтрокаТовар Из ЗапросТовары Цикл
				
				Если (СтрокаТовар.ID = 2) Тогда
					Продолжить;
				КонецЕсли;
				
				Если РасчетСуммыНДСПоСтавке Тогда
					//Выделение суммы НДС, Расчет суммы без НДС
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
					
					СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					
				Иначе
					МассивРаспределения.Очистить();
					МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
					МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
					МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
					Если МассивРаспределенныхСумм <> Неопределено Тогда
						СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
						СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					КонецЕсли;
				КонецЕсли;
				
				Если Шапка.СуммаВключаетНДС Тогда
					СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Шапка", Шапка);
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ЗапросТовары);
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПечатьТОРГ12(БезУслуг = Истина)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиТОРГ12(БезУслуг);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Шапка          = ДанныеДляПечати.Шапка;
	ТабличнаяЧасть = ДанныеДляПечати.ТабличнаяЧасть;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";

	Макет = ПолучитьМакет("ТОРГ12");
	
	ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");

	// Выводим общие реквизиты шапки
	СведенияОПокупателе			= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,        Шапка.ДатаДокумента);
	СведенияОГрузополучателе	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель, Шапка.ДатаДокумента);
	СведенияОПоставщике			= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,       Шапка.ДатаДокумента);
	СведенияОГрузоотправителе	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель,  Шапка.ДатаДокумента);
	НомерДокумента=СформироватьНомерНаПечать(Шапка.Номер);
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	Рез=РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Новый Структура("Объект,Свойство",СсылкаНаОбъект.Организация,ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Начало деятельности").Ссылка));
	ОбластьМакетаШапка.Параметры.НачалоДеятельности=Формат(Рез.Значение,"ДФ=dd.MM.yyyy");
	ОбластьМакетаШапка.Параметры.НомерДокумента = НомерДокумента;
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	
		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе,"НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
	//ОбластьМакетаШапка.Параметры.ОснованиеНомер             = "";
	//ОбластьМакетаШапка.Параметры.ОснованиеДата              = "";
	//ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	//ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакетаШапка);

	// Инициализация счетчика страниц
	НомерСтраницы = 1;

	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	ИтогоМассаБруттоНаСтранице= 0;

	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	ИтогоМассаБрутто= 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ТабличнаяЧасть.Количество();

	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть документа
	Для Каждого ВыборкаСтрок Из ТабличнаяЧасть Цикл

		НомерСтроки = НомерСтроки + 1;

		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
		КонецЕсли;
		
		ОбластьМакетаСтрока.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);

		СуммаСНДС = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		
		КоличествоМест = ВыборкаСтрок.КоличествоМест;
		Количество     = ВыборкаСтрок.Количество;
		СуммаНДС       = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС    = СуммаСНДС - СуммаНДС;

		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		Если Шапка.ВалютаДокумента = мВалютаРегламентированногоУчета И (НЕ Шапка.СуммаВключаетНДС ИЛИ СуммаНДС = 0) Тогда
			ОбластьМакетаСтрока.Параметры.Цена    = ВыборкаСтрок.Цена;
		Иначе
			ОбластьМакетаСтрока.Параметры.Цена    = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		КонецЕсли;
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
		КонецЕсли;                                                   // помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда

			Если КоличествоСтрок > 1 Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМассаБруттоПоСтранице= ИтогоМассаБрутто;
				ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();			
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				ИтогоМассаБруттоНаСтранице= 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакетаСтрока);

		// Увеличим итоги по странице
		ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
        ИтогоМассаБруттоНаСтранице= ИтогоМассаБруттоНаСтранице+ ?(ВыборкаСтрок.МассаБрутто=Null,0,ВыборкаСтрок.МассаБрутто);
		
		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + КоличествоМест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		ИтогоМассаБрутто= ИтогоМассаБрутто+ ?(ВыборкаСтрок.МассаБрутто=Null,0,ВыборкаСтрок.МассаБрутто);
		

	КонецЦикла;

	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
    ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМассаБруттоПоСтранице=ИтогоМассаБруттоНаСтранице;
	ТабДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
	ОбластьМакетаВсего.Параметры.ИтогМассаБрутто= ИтогоМассаБрутто;

	ТабДокумент.Вывести(ОбластьМакетаВсего);

	// Выводим подвал документа
	// Выводим подвал документа
	//Подбор подписанта-уполномоченное лицо + контактная информация
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
		|	ЕстьNull(КонтактнаяИнформация.Представление,"""") Как Доверенность
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&Дата,
		|			СтруктурнаяЕдиница = &Организация
		|				И ОтветственноеЛицо = &Уполномоченный) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = КонтактнаяИнформация.Объект
		|			И (КонтактнаяИнформация.Вид = &ДругаяИнформация)";

	Запрос.УстановитьПараметр("Дата", Шапка.ДатаДокумента);
	Запрос.УстановитьПараметр("ДругаяИнформация", Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица);
	Запрос.УстановитьПараметр("Организация", Шапка.Организация);
	Запрос.УстановитьПараметр("Уполномоченный", Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаДетальныеЗаписи.ФизическоеЛицо);
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера     = ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаДетальныеЗаписи.ФизическоеЛицо);
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = ВыборкаДетальныеЗаписи.Должность.Наименование+Символы.ПС+ВыборкаДетальныеЗаписи.Доверенность;
		//ОбластьМакетаПодвал.Параметры.ФИОКладовщика			= ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаДетальныеЗаписи.ФизическоеЛицо);
		//ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика	= ВыборкаДетальныеЗаписи.Должность.Наименование+Символы.ПС+ВыборкаДетальныеЗаписи.Доверенность;
	КонецЕсли;
	ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                          = ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
	ОбластьМакетаПодвал.Параметры.СуммаПрописью                              = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
	ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
	ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

Функция ПечатьТТН(ПолучитьДанныеПечати = Ложь)
	Перем ПодразделениеОтветственныхЛиц;
	Документ=СсылкаНаОбъект;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	МетаданныеДокумента = Документ.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  Документ);
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		Запрос.УстановитьПараметр("Курс",      ?(Документ.ВалютаДокумента.Код = "810", 1, Документ.КурсВзаиморасчетов));
		Запрос.УстановитьПараметр("Кратность", ?(Документ.ВалютаДокумента.Код = "810", 1, ?(Документ.КратностьВзаиморасчетов = 0, 1, Документ.КратностьВзаиморасчетов)));
	Иначе
		Запрос.УстановитьПараметр("Курс",      1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Контрагент  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	ВЫБОР 	КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      	ТОГДА Организация
	|	      	ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР 	КОГДА Грузоотправитель = &ПустойКонтрагент
	|		  	ТОГДА Организация.ЮрФизЛицо
	|		  	ИНАЧЕ Грузоотправитель.ЮрФизЛицо
	|	КОНЕЦ                            КАК ГрузоотправительЮрФизЛицо,
	|	ВЫБОР 	КОГДА Грузополучатель = &ПустойКонтрагент
	|	      	ТОГДА Контрагент
	|	      	ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР	КОГДА Грузополучатель = &ПустойКонтрагент
	|			ТОГДА Контрагент.ЮрФизЛицо
	|			ИНАЧЕ Грузополучатель.ЮрФизЛицо
	|	КОНЕЦ                            КАК ГрузополучательЮрФизЛицо,
	|	Контрагент   КАК Покупатель,
	|	Контрагент   КАК Плательщик,
	|	ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов       КАК Курс,
	|	КратностьВзаиморасчетов  КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки                                  КАК Номер,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
	|		Номенклатура.Код                             КАК ТоварКод,
	|		Номенклатура." + ТоварКод + "                КАК Артикул,
	|		Количество,
	|		КоличествоМест,
	|		КоличествоМест*ЕдиницаИзмерения.Вес		 КАК МассаБрутто,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|		ЕдиницаИзмерения               КАК ВидУпаковки,
	|		ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|		Коэффициент,
	|		Цена     * &Курс / &Кратность                КАК Цена,
	|		Сумма    * &Курс / &Кратность                КАК Сумма,
	|		СуммаНДС * &Курс / &Кратность                КАК СуммаНДС,
	|		Сумма  										 КАК СуммаВВалютеДокумента,
	|		СуммаНДС									 КАК СуммаНДСВВалютеДокумента,
	|		СтавкаНДС
	|	)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Документ";
	
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрок = Шапка.Товары.Выгрузить();
	
	Если Документ.Проведен И Шапка.РасчетыВУсловныхЕдиницах Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Документ.СчетУчетаРасчетовСКонтрагентом);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугТовары.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ГДЕ
		|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка)
		|";
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
		
			ВыборкаСтрок.Колонки.Добавить("СуммаБезНДСВВалютеДокумента");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ВыборкаСтрок Цикл
				
				СуммаСНДСВВалютеДокумента = СтрокаТовар.СуммаВВалютеДокумента + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДСВВалютеДокумента);
				Если (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
				 ИЛИ (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
			 	 ИЛИ (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
					СуммаБезНДСВВалютеДокумента = СуммаСНДСВВалютеДокумента;
				Иначе
					СуммаБезНДСВВалютеДокумента = СуммаСНДСВВалютеДокумента - СтрокаТовар.СуммаНДСВВалютеДокумента;
				КонецЕсли;
				
				МассивРаспределения.Добавить(СуммаСНДСВВалютеДокумента);
				СтрокаТовар.СуммаБезНДСВВалютеДокумента = СуммаБезНДСВВалютеДокумента;
				
			КонецЦикла;
			
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ВыборкаСтрок, "Сумма");
			
			Для Каждого СтрокаТовар Из ВыборкаСтрок Цикл
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДСВВалютеДокумента);
				МассивРаспределения.Добавить(СтрокаТовар.СуммаНДСВВалютеДокумента);
				МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.Сумма, МассивРаспределения);
				
				Если НЕ (МассивРаспределенныхСумм = Неопределено) Тогда
					
					СтрокаТовар.Сумма    = МассивРаспределенныхСумм[0] + ?(Шапка.СуммаВключаетНДС, МассивРаспределенныхСумм[1], 0);
					СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	

	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("ТТН");
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента , ,);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента , , );
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	КоличествоСтрок = ВыборкаСтрок.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице	= 0;
	ИтогоСуммаНаСтранице		= 0;
	ИтогоНДСНаСтранице			= 0;
	ИтогоСуммаСНДСНаСтранице	= 0;
    ИтогоМассаБруттоНаСтранице	= 0;
	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	Ном             = 0;
	ИтогоМассаБрутто		= 0;

	// Выводим многострочную часть документа
		Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			// очистим итоги по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;

			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;


		Мест        = ВыборкаСтрокТовары.КоличествоМест;
		Количество  = ВыборкаСтрокТовары.Количество;
		
		
		СуммаСНДС = (ВыборкаСтрокТовары.Сумма
		+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));
		СуммаНДС    = ВыборкаСтрокТовары.СуммаНДС;
		СуммаБезНДС = СуммаСНДС    - СуммаНДС;
		
		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
        ИтогоМассаБруттоНаСтранице= ИтогоМассаБруттоНаСтранице+ ?(ВыборкаСтрокТовары.МассаБрутто=Null,0,ВыборкаСтрокТовары.МассаБрутто);
		// увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		ИтогоМассаБрутто= ИтогоМассаБрутто+ ?(ВыборкаСтрокТовары.МассаБрутто=Null,0,ВыборкаСтрокТовары.МассаБрутто);

	КонецЦикла;


	ОбластьМакета   = Макет.ПолучитьОбласть("ТранспортныйРаздел");
	ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , Истина);
	ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , Ложь);

	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;

 	ОбластьМакета.Параметры.Номер                     = СформироватьНомерНаПечать(Шапка.Номер);
	ОтборТрансИнф=Новый Структура;
	ОтборТрансИнф.Вставить("ДокРеализация",СсылкаНаОбъект);
	Запись=РегистрыСведений.АвтомобилиСобственные.Выбрать(ОтборТрансИнф);
	Если Запись.Следующий() Тогда
		ФИОВодителя=Запись.Водитель;
		Если Запись.Перевозчик=Справочники.Контрагенты.ПустаяСсылка() Тогда
			ОбластьМакета.Параметры.ОрганизацияПеревозчик		= Запись.П000010000103;
		Иначе
			ОбластьМакета.Параметры.ОрганизацияПеревозчик		= ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Запись.Перевозчик,  СсылкаНаОбъект.Дата,,Запись.Перевозчик.ОсновнойБанковскийСчет));
		КонецЕсли;
		ОбластьМакета.Параметры.МаркаАвтомобиля           = Запись.МаркаАвтомобиля;//Запись.П000010000112;
		ОбластьМакета.Параметры.ГосНомерАвтомобиля        = Запись.П000010000114;
		ОбластьМакета.Параметры.ОрганизацияЗаказчик       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм");
		ОбластьМакета.Параметры.ФИОВодителя               = ФИОВодителя;
		ОбластьМакета.Параметры.ВодительскоеУдостоверение = Запись.ВодительскоеУдостоверение;
		ОбластьМакета.Параметры.ВидПеревозки              = "автотранспортная";
		ОбластьМакета.Параметры.ПунктПогрузки             = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес");
		ОбластьМакета.Параметры.ПунктРазгрузки            = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		//ОбластьМакета.Параметры.СрокДоставки              = СрокДоставки;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузеШапка");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузеСтрока");
	ВесБрутто=0;
	Для Каждого СтрокаТЧ Из ВыборкаСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ОбластьМакета.Параметры.НомерСтроки=Строка(СтрокаТЧ.Номер)+" "+СтрокаТЧ.Номенклатура.Наименование;
		ТабДокумент.Вывести(ОбластьМакета);
		ВесБрутто=ВесБрутто+?(СтрокаТЧ.МассаБрутто=Null,0,СтрокаТЧ.МассаБрутто);
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузеПодвал");
	ОбластьМакета.Параметры.НомерСтроки=ВыборкаСтрок.Количество()+1;
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
	ОбластьМакета.Параметры.ФИОВодителя               = ФИОВодителя;
	ОбластьМакета.Параметры.ВесБрутто				  = Формат(ВесБрутто/1000,"ЧДЦ=3; ЧН=");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьТТН()


// Процедура считывает ФИО физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция ФИО(Ссылка)

	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	
	Фамилия  = ФИОСрез.Фамилия;
	Имя      = ФИОСрез.Имя;
	Отчество = ФИОСрез.Отчество;
	Возврат Фамилия+" "+Сред(Имя,1,1)+"."+Сред(Отчество,1,1)+".";
	
КонецФункции 

Функция СформироватьНомерНаПечать(Номер) 
	НомерТемп=Номер;
	
	Пока НЕ (Лев(НомерТемп, 1)>"0" И Лев(НомерТемп, 1)<="9") Цикл
		НомерТемп = Сред(НомерТемп, 2);
	КонецЦикла;	
	Возврат НомерТемп;
КонецФункции

Функция СформироватьСтруктуруПодписейДляПечати( Руководители, Организация, Дата, ВозвращаемаяСтруктура = Неопределено)
	
	Если ВозвращаемаяСтруктура = Неопределено Тогда 
		ВозвращаемаяСтруктура = Новый Структура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.Руководитель) И Руководители.Руководитель <> СсылкаНаОбъект.Руководитель Тогда
		ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(Организация, СсылкаНаОбъект.Руководитель, Дата);
		ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.Руководитель) + " " + СсылкаНаОбъект.ЗаРуководителяПоПриказу;
		ВозвращаемаяСтруктура.Вставить("Руководитель",          СсылкаНаОбъект.Руководитель);
		ВозвращаемаяСтруктура.Вставить("ФИОРуководителя",		ФИОРуководителя);
		ВозвращаемаяСтруктура.Вставить("ДолжностьРуководителя", "" + ДанныеПодотчетногоЛица.Должность);
	Иначе
		ВозвращаемаяСтруктура.Вставить("Руководитель",          Руководители.Руководитель);
		ВозвращаемаяСтруктура.Вставить("ФИОРуководителя",       Руководители.РуководительПредставление);
		ВозвращаемаяСтруктура.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ГлавныйБухгалтер) Тогда
		ФИОГлавБух = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.ГлавныйБухгалтер) + " " + СсылкаНаОбъект.ЗаГлавногоБухгалтераПоПриказу;
		ВозвращаемаяСтруктура.Вставить("ГлавныйБухгалтер",      СсылкаНаОбъект.ГлавныйБухгалтер);
		ВозвращаемаяСтруктура.Вставить("ФИОГлавБухгалтера",		ФИОГлавБух);
	Иначе
		ВозвращаемаяСтруктура.Вставить("ГлавныйБухгалтер",      Руководители.ГлавныйБухгалтер);
		ВозвращаемаяСтруктура.Вставить("ФИОГлавБухгалтера",     Руководители.ГлавныйБухгалтерПредставление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ОтпускПроизвел) Тогда
		ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(Организация, СсылкаНаОбъект.ОтпускПроизвел, СсылкаНаОбъект.Дата);
		ФИОКладовщика = ОбщегоНазначения.ФамилияИнициалыФизЛица(СсылкаНаОбъект.ОтпускПроизвел);
		ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", ФИОКладовщика);
		Если ДанныеПодотчетногоЛица.Должность <> Null Тогда 
			ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", ДанныеПодотчетногоЛица.Должность.Наименование);
		Иначе 
			ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", "");
		КонецЕсли;
		ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", ФИОКладовщика);
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаОбъект.Склад) Тогда
		Срез = РегистрыСведений.ОтветственныеЛица.СрезПоследних(Дата, Новый Структура("СтруктурнаяЕдиница", СсылкаНаОбъект.Склад));
		Если Срез.Количество() > 0 Тогда
			ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(Организация, Срез[0].ФизическоеЛицо, Дата);
			ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", "" + ДанныеПодотчетногоЛица.Представление);
			ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", "" + ДанныеПодотчетногоЛица.Должность);
		Иначе 
			ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", "");
			ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", "");
		КонецЕсли;
	Иначе 
		ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", "");
		ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", "");
	КонецЕсли;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции	

                                                                                 
// Функции и процедуры для использования внешними данными

// Внешняя функция печати
// КТ-2000: (095)789-3070
// Параметры
//  ИмяМакета  – Строка – имя формы печати
//
// Возвращаемое значение:
//   Булево   –Печать прошла успешно - Истина, иначе - Ложь
//
Функция Печать(ИмяМакета = "", ПараметрыПечати = Неопределено)	Экспорт

	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
    ТабДокумент=Новый ТабличныйДокумент;
	
	ТабДокументТОРГ12=ПечатьТОРГ12();
	ТабДокументТТН = ПечатьТТН();

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";
	
	ТабДокумент.Вывести(ТабДокументТОРГ12);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ТабДокументТТН);
	Возврат ТабДокумент;
КонецФункции // Печать()

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();