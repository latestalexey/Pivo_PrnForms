Перем мВалютаРегламентированногоУчета Экспорт;

// Степанов ++, #1208347, 01.07.2016
Перем НомерСтраницы;
// Степанов

Функция ПечатьТТН(Док="") Экспорт
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	РабочийДокумент=?(ЗначениеЗаполнено(Док),Док,Документ);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          РабочийДокумент.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РабочийДокумент.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",  РабочийДокумент);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент   КАК Покупатель,
	|	Контрагент   КАК Плательщик,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	Подразделение,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов       КАК Курс,
	|	КратностьВзаиморасчетов  КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ОтпускРазрешил,
	|	ОтпускПроизвел,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьВыдана
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", РабочийДокумент);
	
	Если РабочийДокумент.ВалютаДокумента = РабочийДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", РабочийДокумент.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", РабочийДокумент.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление           КАК ВидУпаковки,
	|	ВложенныйЗапрос.Характеристика      КАК Характеристика,
	|	ВложенныйЗапрос.Серия               КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВЫБОР
	|		КОГДА((ВложенныйЗапрос.ПроцентСкидкиНаценки = 0) И 
	|		      (ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0))
	|	ТОГДА ЛОЖЬ
	|	ИНАЧЕ Истина
	|	КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест      КАК КоличествоМест,
	|	ЕСТЬNULL(ВложенныйЗапрос.ВесБрутто,0) КАК ВесБрутто,
	|	ВложенныйЗапрос.Сумма               КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры            КАК Характеристика,
	|		РеализацияТоваровУслуг.СерияНоменклатуры                     КАК Серия,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность             КАК Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		СУММА(РеализацияТоваровУслуг.Количество)                     КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест)                 КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест * РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Вес / 1000) КАК ВесБрутто,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность)  КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность)  КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                  КАК НомерСтроки,
	|		0                                                            КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + "   КАК Артикул,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,   
	|	Ложь                                                  КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	0                                                     КАК КоличествоМест,
	|	0                                                     КАК ВесБрутто,
	|	РеализацияТоваровУслуг.Сумма                          КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|(ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                      КАК Номенклатура,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность         КАК Цена,
	|	СУММА(РеализацияТоваровУслуг.Количество)                 КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма * &Курс / &Кратность) КАК Сумма,
	|	МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)              КАК НомерСтроки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Цена
	|) КАК РеализацияТоваровУслуг
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Макет       = ПолучитьМакет("ТТН");
	ТабДокумент=новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	
	// инициализация итогов по документу
	ИтогоМест       = 0;
	//20120111 Лямкина Юлия
	ИтогоВес       = 0;
	//20120111 Лямкина Юлия
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;
	
	// Выводим многострочную часть докмента
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		
		Ном           = Ном + 1;
		Если ВыборкаСтрок.Метка = 2 Тогда 
			СуммаСНДС   = 0;
			СуммаНДС    = 0;
			СуммаБезНДС = 0;
		Иначе
			СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
			СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
		КонецЕсли;
		//20120301 Лямкина Юлия
		// увеличим итоги по дукументу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		//20120111 Лямкина Юлия
		ИтогоВес = ИтогоВес + ВыборкаСтрок.ВесБрутто;
		//20120111 Лямкина Юлия
	КонецЦикла;
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	
	//20111213 Лямкина Юлия
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриказыВПодписи.Приказ КАК Приказ
	|ИЗ
	|	РегистрСведений.ПриказыВПодписи КАК ПриказыВПодписи
	|ГДЕ
	|	ПриказыВПодписи.Организация = &Организация
	|	И ПриказыВПодписи.Пользователь = &Ответственный";
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	Запрос.УстановитьПараметр("Ответственный", Документ.Ответственный);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		Бухгалтер    = "" + Документ.Ответственный + " (" + ВыборкаЗапроса.Приказ + ")";
	Иначе
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
	КонецЕсли;
	
	// Отпуск товара разрешил
	Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ФИООтпускРазрешил       = "" + Документ.Ответственный + " (" + ВыборкаЗапроса.Приказ + ")";
		Иначе
			ФИООтпускРазрешил       = Руководитель;
		КонецЕсли;
		//\\20111213 Лямкина Юлия
		ДолжностьОтпускРазрешил = ""; //Руководители.РуководительДолжность;
	Иначе
		ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица    = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, Шапка.Организация);
		ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
		ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
	КонецЕсли;
	
	// Отпуск товара произвел
	Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Шапка.Организация);
	Иначе
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, Шапка.Организация);
	КонецЕсли;
	
	ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
	ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
	
	ОбластьМакета   = Макет.ПолучитьОбласть("ТранспортныйРаздел");
	ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , НЕ ЛицензионнаяКарточка);
	ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , ЛицензионнаяКарточка);
	
	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;
	
	ОбластьМакета.Параметры.СрокДоставки              = СрокДоставки;
	ОбластьМакета.Параметры.Номер                     = СформироватьНомерНаПечать(Шапка.Номер);//ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	СведенияОПеревозчике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Перевозчик, Шапка.ДатаДокумента,Перевозчик.ОсновнойБанковскийСчет);
	ОбластьМакета.Параметры.ОрганизацияПеревозчик     = Перевозчик.НаименованиеПолное+", "+ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, "ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");;;
	ОбластьМакета.Параметры.МаркаАвтомобиля           = МаркаАвтомобиля;
	ОбластьМакета.Параметры.ГосНомерАвтомобиля        = ГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ОрганизацияЗаказчик       = Заказчик;
	ОбластьМакета.Параметры.ФИОВодителя               = ОбщегоНазначения.ФамилияИнициалыФизЛица(Водитель);
	ОбластьМакета.Параметры.ВодительскоеУдостоверение = ВодительскоеУдостоверение;
	ОбластьМакета.Параметры.ВидПеревозки              = ВидПеревозки;
	ОбластьМакета.Параметры.ПунктПогрузки             = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки            = ПунктРазгрузки;
	ОбластьМакета.Параметры.Прицеп                    = МаркаПрицепа;
	ОбластьМакета.Параметры.ГосНомерПрицепа           = ГосНомерПрицепа;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузеШапка");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузеСтрока");
	Для Каждого СтрокаТЧ Из ЗапросТовары Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаТЧ);
		ОбластьМакета.Параметры.НомерСтроки=Строка(СтрокаТЧ.НомерСтроки)+" "+СтрокаТЧ.Номенклатура.Наименование;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузеПодвал");
	ОбластьМакета.Параметры.НомерСтроки=ЗапросТовары.Количество()+1;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
	//20120111 Лямкина Юлия
	ОбластьМакета.Параметры.ФИОВодителя           = ОбщегоНазначения.ФамилияИнициалыФизЛица(Водитель);
	ОбластьМакета.Параметры.ВесБрутто           = ИтогоВес;
	//20120111 Лямкина Юлия
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТТН()

Функция ПечатьТОРГ12(ВыбДокумент,БезТары = Истина) Экспорт
	БезУслуг=Ложь;
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          ВыбДокумент.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ВыбДокумент.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    ВыбДокумент.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	//Кристина 20130419
	Запрос.УстановитьПараметр("Тип",				Перечисления.ТипыКонтактнойИнформации.Телефон);
	//\\ Кристина 20130419
	
	Запрос.УстановитьПараметр("НачалоДеятельности",	ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Начало деятельности").Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	РеализацияТоваровУслуг.Подразделение,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ОтпускРазрешил,
	|	РеализацияТоваровУслуг.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого,
	|	ВложенныйЗапрос.Представление КАК КонтактныйТелефонМенеджера,
	|	РеализацияТоваровУслуг.Контрагент.ОсновнойМенеджерПокупателя КАК ОсновнойМенеджер,
	|	ЗначенияСвойствНачалоДеятельности.Значение КАК НачалоДеятельности
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|			КонтактнаяИнформация.Представление КАК Представление
	|		ИЗ
	|			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|				ПО РеализацияТоваровУслуг.Контрагент.ОсновнойМенеджерПокупателя = КонтактнаяИнформация.Объект
	|		ГДЕ
	|			КонтактнаяИнформация.Тип = &Тип
	|			И РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент) КАК ВложенныйЗапрос
	|		ПО РеализацияТоваровУслуг.Ссылка = ВложенныйЗапрос.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствНачалоДеятельности
	|		ПО РеализацияТоваровУслуг.Организация = ЗначенияСвойствНачалоДеятельности.Объект
	|			И (ЗначенияСвойствНачалоДеятельности.Свойство = &НачалоДеятельности)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ВыбДокумент.Ссылка);
	
	// Вычислим курс документа для печати
	Если ВыбДокумент.ВалютаДокумента <> мВалютаРегламентированногоУчета
		И ВыбДокумент.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
		И ВыбДокумент.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		
		ЗапросКурсАванса = Новый Запрос;
		ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", ВыбДокумент.Ссылка);
		ЗапросКурсАванса.Текст =
		"ВЫБРАТЬ
		|	Док.СуммаВзаиморасчетов,
		|	Док.СуммаРегл
		|ИЗ 
		|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
		|ГДЕ Док.Ссылка = &ДокументСсылка
		|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
		
		Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл/Выборка.СуммаВзаиморасчетов);
			ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			ВыборкаСуммаРегл           = Выборка.СуммаРегл;
		Иначе
			КурсОплаты                 = 0;
			ВыборкаСуммаВзаиморасчетов = 0;
			ВыборкаСуммаРегл           = 0;
		КонецЕсли;
		
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ВыбДокумент),
		ВыбДокумент.ВалютаДокумента, ВыбДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		ЗаполнениеДокументов.КурсДокумента(ВыбДокумент, мВалютаРегламентированногоУчета), ВыбДокумент.КурсВзаиморасчетов,
		ЗаполнениеДокументов.КратностьДокумента(ВыбДокумент, мВалютаРегламентированногоУчета), ВыбДокумент.КратностьВзаиморасчетов);
		НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
		Если НеоплаченнаяСумма > 0 Тогда
			КурсДляПечати = (НеоплаченнаяСумма * ВыбДокумент.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
		Иначе
			КурсДляПечати = КурсОплаты;
		КонецЕсли;
		
		Если КурсДляПечати = 0 Тогда
			Запрос.УстановитьПараметр("Курс",      ВыбДокумент.КурсВзаиморасчетов);
			Запрос.УстановитьПараметр("Кратность", ВыбДокумент.КратностьВзаиморасчетов);
		Иначе
			Запрос.УстановитьПараметр("Курс",      КурсДляПечати);
			Запрос.УстановитьПараметр("Кратность", 1);
		КонецЕсли;
		
	ИначеЕсли ВыбДокумент.ВалютаДокумента = ВыбДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", ВыбДокумент.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ВыбДокумент.КратностьВзаиморасчетов);
		
	Иначе
		
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс",      1);
		Запрос.УстановитьПараметр("Кратность", 1);
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	//		|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	//		|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС            КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                 КАК Цена,
	|	ВЫБОР
	|		КОГДА((ВложенныйЗапрос.ПроцентСкидкиНаценки = 0) И 
	|		      (ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0))
	|	ТОГДА ЛОЖЬ
	|	ИНАЧЕ Истина
	|	КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест       КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС             КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент     КАК КоэффициентМест,
	//|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры           КАК Характеристика,
	//|		РеализацияТоваровУслуг.СерияНоменклатуры                    КАК Серия,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест)                КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                           КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	//|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	//|		РеализацияТоваровУслуг.СерияНоменклатуры,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок
	|	) КАК ВложенныйЗапрос
	|";
	
	Если НЕ БезУслуг Тогда
		
		СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номенклатура                  КАК Номенклатура,
		|	" + СтрокаВыборкиПоляСодержания + "                  КАК ТоварНаименование,
		|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + " КАК ТоварКод,
		|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК БазоваяЕдиницаНаименование,
		|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
		|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	NULL                                                 КАК ВидУпаковки,
		|	NULL                                                 КАК КоличествоВОдномМесте,
		|	0                                                    КАК МассаБрутто,
		//|	NULL                                                 КАК Характеристика,
		//|	NULL                                                 КАК Серия,
		|	РеализацияТоваровУслуг.СтавкаНДС                     КАК СтавкаНДС,
		|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
		|	ВЫБОР
		|		КОГДА(РеализацияТоваровУслуг.ПроцентСкидкиНаценки = 0)
		|	ТОГДА ЛОЖЬ
		|	ИНАЧЕ Истина
		|	КОНЕЦ                                                КАК ЕстьСкидкиПоСтроке,
		|	РеализацияТоваровУслуг.Количество                    КАК Количество,
		|	NULL                                                 КАК КоличествоМест,
		|	РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
		|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
		|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
		|	1                                                    КАК Метка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК МассаБрутто,
	//|	NULL                                                  КАК Характеристика,
	//|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	0													  КАК Цена,
	|	Ложь                                                  КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	0     												  КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Состояние("Сортировка табличной части");
	СортироватьПоРодителю(ЗапросТовары);
	Состояние("");
	
	ТабДокумент  = Новый ТабличныйДокумент;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	
	Макет = ПолучитьМакет("ТОРГ12");
	
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, ?(Шапка.БанковскийСчет.Владелец=Шапка.ЮрФизЛицо,Шапка.БанковскийСчет,Шапка.ЮрФизЛицо.ОсновнойБанковскийСчет));
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	Если БезТары Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТовар");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТара");
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если БезТары Тогда
		ОбластьМакета.Параметры.НачалоДеятельности=Формат(Шапка.НачалоДеятельности,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.НомерДокумента = СформироватьНомерНаПечать(Шапка.Номер);//ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	Иначе
		ОбластьМакета.Параметры.НомерТара=СформироватьНомерНаПечать(Шапка.Номер);
		ОбластьМакета.Параметры.ДатаТара=Формат(Шапка.ДатаДокумента,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.НомерДокументаСПрефиксом=ВыбДокумент.ДокументОснование.Организация.Префикс+ОбщегоНазначения.ПолучитьНомерНаПечать(ВыбДокумент.ДокументОснование);
	КонецЕсли;
	
	
	
	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ЗапросКоментария=Новый Запрос;
	ЗапросКоментария.Текст = "
	|Выбрать
	|Контакты.Комментарий,
	|Контакты.Объект
	|ИЗ
	|РегистрСведений.КонтактнаяИнформация КАК Контакты
	|ГДЕ
	|Контакты.Объект=&Контр";
	ЗапросКоментария.Параметры.Вставить("Контр",Шапка.Плательщик);
	РезультатЗапКом=ЗапросКоментария.Выполнить().Выбрать();
	Пока РезультатЗапКом.Следующий() Цикл
		ТекКоментарий=РезультатЗапКом.Комментарий;
		Если ЗначениеЗаполнено(ТекКоментарий)=Истина Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = (ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"))+ " (" + Строка(ТекКоментарий) + ")";
	ОбластьМакета.Параметры.АдресДоставки=ПунктРазгрузки;
	
	
	Если БезТары Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакета.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
		
		Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ОбластьМакета.Параметры.Основание = Шапка.Основание;
		Иначе
			Если ЗначениеЗаполнено(Шапка.Сделка) Тогда
				ОбластьМакета.Параметры.Основание = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка.Сделка, Строка(Шапка.Сделка.Метаданные().Синоним));
			КонецЕсли;
		КонецЕсли;
		
		// Выводим всевозможные коды
		ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправитель.КодПоОКПО;
		ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
		ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакета.Параметры.ПоставщикПоОКПО       = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ОснованиеНомер        = Документ.ДоговорКонтрагента.Номер;
		ОбластьМакета.Параметры.ОснованиеДата         = Формат(Документ.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	НомерСтраницы   = 1;
	
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;
	
	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	// Выводим многострочную часть докмента
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
	ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
	//ZAM+++ 05.12.2013 #1077986 сделать в РТУ остаток долга в разрезе всех организаций
	ОбластьДолгиШапка       = Макет.ПолучитьОбласть("ДолгиШапка");
	ОбластьДолгиСтрока      = Макет.ПолучитьОбласть("ДолгиСтрока");
	//ZAM--- 05.12.2013
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Ном           = Ном + 1;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
		//+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
		+ ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрок.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;
		
		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);
		
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;
		
		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
		
		Если Шапка.СуммаВключаетНДС
			Или ВыборкаСтрок.ЕстьСкидкиПоСтроке Тогда
			ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		Иначе
			ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
		КонецЕсли;
		
		Если Ном = 1 Тогда // первая срока
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;		
			
			Если Ном <> 1 И НЕ ТабДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
				
				ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// очистим итоги по странице
				ИтогоМассаБруттоНаСтранице = 0;
				ИтогоМестНаСтранице        = 0;
				ИтогоКоличествоНаСтранице  = 0;
				ИтогоСуммаНаСтранице       = 0;
				ИтогоНДСНаСтранице         = 0;
				ИтогоСуммаСНДСНаСтранице   = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;		
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;
		
		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;
		
	КонецЦикла;
	
	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;
	
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = Найти(ПолнаяДатаДокумента," ");
	ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки-ПервыйРазделитель)," ")+ПервыйРазделитель;
	ОбластьМакета.Параметры.ДатаДокументаДень     = """"+Лев(ПолнаяДатаДокумента,ПервыйРазделитель-1)+"""";
	ОбластьМакета.Параметры.ДатаДокументаМесяц    = Сред(ПолнаяДатаДокумента,ПервыйРазделитель+1,ВторойРазделитель-ПервыйРазделитель-1);
	ОбластьМакета.Параметры.ДатаДокументаГод      = Прав(ПолнаяДатаДокумента,ДлинаСтроки-ВторойРазделитель);	
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	
	// Отпуск товара разрешил
	Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
		ФИООтпускРазрешил       = Руководитель;
		ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	Иначе
		ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица    = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, ВыбДокумент.Организация);
		ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
		ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
	КонецЕсли;
	Подписант=ИТИИндустрияОбщийМодульКлиентСервер.ПолучитьПодписанта(СсылкаНаОбъект);
	Ответственный=ОбщегоНазначения.ФамилияИнициалыФизЛица(Подписант.Подписант)+?(ЗначениеЗаполнено(Подписант.Приказ)," ("+Подписант.Приказ+")","");
	
	Если Ответственный<>"" Тогда
		ОбластьМакета.Параметры.ФИОГлавБухгалтера = Ответственный; //Бухгалтер;
		ОбластьМакета.Параметры.ФИОРуководителя   = Ответственный; //ФИООтпускРазрешил;
	Иначе
		ОбластьМакета.Параметры.ФИОГлавБухгалтера = Бухгалтер;
		ОбластьМакета.Параметры.ФИОРуководителя   = ФИООтпускРазрешил;		
	КонецЕсли;
	//\\20111130 Лямкина Юлия
	
	
	// Отпуск товара произвел
	Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, ВыбДокумент.Организация);
	Иначе
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, ВыбДокумент.Организация);
	КонецЕсли;
	
	ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
	ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
	
	ОбластьМакета.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
	ОбластьМакета.Параметры.ДолжностьКладовщика = ДолжностьОтпускПроизвел;
	
	// Доверенность
	ОбластьМакета.Параметры.ДоверенностьНомер     = Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДоверенностьДата      = Формат(Шапка.ДоверенностьДата, "ДФ='дд ММММ гггг'");
	ОбластьМакета.Параметры.ДоверенностьВыдана    = Шапка.ДоверенностьВыдана;
	ОбластьМакета.Параметры.ДоверенностьЧерезКого = Шапка.ДоверенностьЧерезКого;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
	КонецЕсли;
	
	Если ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;
	
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	
	ОбластьМакета.Параметры.Водитель=ФИО(Водитель);
	//ДатаДолгаТары = КонецДня(ВыбДокумент.Дата-86400); //конец предыдущего дня
	//ОбластьМакета.Параметры.ДатаДолгаТары = Формат(ДатаДолгаТары, "ДЛФ=Д");
	ТабДокумент.Вывести(ОбластьМакета);
	Если Не БезТары Тогда
		// Выводим акт и долг по тпре
		ОбластьМакета = Макет.ПолучитьОбласть("АктШапка");
		ДатаДолгаТары = КонецДня(ВыбДокумент.Дата-86400); //конец предыдущего дня
		ОбластьМакета.Параметры.ДатаДолгаТары = Формат(ДатаДолгаТары, "ДЛФ=Д");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("АктСтрока");
		
		Запрос = Новый Запрос;
		//Запрос.УстановитьПараметр("Контрагент", ?(ВыбДокумент.Грузополучатель=Справочники.Контрагенты.ПустаяСсылка(), ВыбДокумент.Контрагент, ВыбДокумент.Грузополучатель));//ZAM 17.06.2013 #1052058 заменить остатки контрагента на остатки грузополучателя
		ТекКонтрагент = ?(ВыбДокумент.Грузополучатель=Справочники.Контрагенты.ПустаяСсылка(), ВыбДокумент.Контрагент, ВыбДокумент.Грузополучатель);//ZAM 17.06.2013 #1052058 заменить остатки контрагента на остатки грузополучателя
		//ТекКонтрагент = ТекКонтрагент.ГоловнойКонтрагент;//ZAM 24.11.2014 #1185119 Выводить остаток кег по Контрагенту-Холдинг, без учета Организации
		Запрос.УстановитьПараметр("Контрагент", ТекКонтрагент);
		Запрос.УстановитьПараметр("ДатаДолгаТары", ДатаДолгаТары);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыПереданныеОстатки.Номенклатура КАК Номенклатура,
		|	СУММА(ТоварыПереданныеОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаДолгаТары, Грузополучатель = &Контрагент) КАК ТоварыПереданныеОстатки
		|ГДЕ
		|	ТоварыПереданныеОстатки.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|	И ТоварыПереданныеОстатки.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПереданныеОстатки.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
		
		ВыборкаТара = Запрос.Выполнить().Выбрать();
		ТекНомер = 0;
		Пока ВыборкаТара.Следующий() Цикл
			ТекНомер = ТекНомер + 1;
			ОбластьМакета.Параметры.ТараНомер = ТекНомер;;
			ОбластьМакета.Параметры.ТараНаименование = ВыборкаТара.Номенклатура;
			ОбластьМакета.Параметры.ТараКоличество = ВыборкаТара.КоличествоОстаток;
			ТабДокумент.Вывести(ОбластьМакета);		
		КонецЦикла;
		Если ТекНомер < 3 Тогда 
			Для сч = ТекНомер По 3 Цикл
				ОбластьМакета.Параметры.ТараНомер = "";;
				ОбластьМакета.Параметры.ТараНаименование = "";
				ОбластьМакета.Параметры.ТараКоличество = "";
				ТабДокумент.Вывести(ОбластьМакета);	
			КонецЦикла;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("АктПодвал");
		ТабДокумент.Вывести(ОбластьМакета);
	Иначе
		//ZAM+++ 05.12.2013 #1077986 сделать в РТУ остаток долга в разрезе всех организаций
		//ТабДокумент.Вывести(ОбластьДолгиШапка);
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация,
		|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаНач,
		|			Контрагент = &Контрагент
		|				И ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация";
		Запрос.УстановитьПараметр("Контрагент", СсылкаНаОбъект.Контрагент);
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(СсылкаНаОбъект.Дата)-1);//окончание предыдущего дня
		Рез = Запрос.Выполнить().Выгрузить();
		Для Сч = 1 По 4 Цикл
			ОбластьДолгиСтрока.Параметры.Номер = Сч;
			Если Рез.Количество()>=Сч Тогда
				ОбластьДолгиСтрока.Параметры.Организация = Рез[Сч-1].Организация;
				ОбластьДолгиСтрока.Параметры.Сумма       = Рез[Сч-1].Сумма;
			Иначе
				ОбластьДолгиСтрока.Параметры.Организация = "";
				ОбластьДолгиСтрока.Параметры.Сумма       = "";
			КонецЕсли;
			//ТабДокумент.Вывести(ОбластьДолгиСтрока);
		КонецЦикла;
		//ZAM--- 05.12.2013
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТОРГ12()

//Андрей ИТ Индустрия
Процедура АвтомобильПриИзменении(Элемент)
	МаркаАвтомобиля=Автомобиль.Наименование;
	ГосНомерАвтомобиля=Автомобиль.ГосНомер;
	
	// 20120106 Лямкина Юлия
	МаркаПрицепа = Автомобиль.МаркаПрицепа;
	ГосНомерПрицепа = Автомобиль.ГосНомерПрицепа;
	//\\ 20120106 Лямкина Юли
КонецПроцедуры
//Андрей ИТ Индустрия

// 20120106 Лямкина Юлия
Процедура ЗаполнитьДанныеПоВодителю(Водитель) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""Автомобиль""";
	
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Автомобиль = Выборка.Значение;
		МаркаАвтомобиля = Автомобиль.Наименование;
		ГосНомерАвтомобиля = Автомобиль.ГосНомер;
		МаркаПрицепа = Автомобиль.МаркаПрицепа;
		ГосНомерПрицепа = Автомобиль.ГосНомерПрицепа;
		ВидПеревозки="автотранспорт";
	Иначе
		Автомобиль = "";
		МаркаАвтомобиля = "";
		ГосНомерАвтомобиля = "";
		МаркаПрицепа = "";
		ГосНомерПрицепа = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(Водитель) Тогда 
		ВодительскоеУдостоверение = Водитель.НомерУдостоверения;
	Иначе 
		ВодительскоеУдостоверение = "";
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	СвязанныеДокументы.Ссылка
	             |ИЗ
	             |	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
	             |ГДЕ
	             |	СвязанныеДокументы.Ссылка ССЫЛКА Документ.МаршрутныйЛист
	             |	И НЕ СвязанныеДокументы.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""Перевозчик""";
		Запрос.УстановитьПараметр("Объект",Водитель);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Перевозчик=Выборка.Значение;
		Иначе
			//Перевозчик="ООО ""Эвертон Логистик""";
		КонецЕсли;
	Иначе
		Выборка=РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Перевозчик=Выборка.Ссылка.Перевозчик;
	КонецЕсли;
КонецПроцедуры

Процедура ВодительПриИзменении(Элемент)
	ЗаполнитьДанныеПоВодителю(Водитель);
КонецПроцедуры
//\\ 20120106 Лямкина Юлия

//Андрей
Процедура ЗаполнитьПоСвойствам()
	
	Отбор=Новый Структура("Объект,Свойство");
	
	//Поиск водителя по документу
	Отбор.Объект=Документ.Ссылка;
	Отбор.Свойство=ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Экспедитор");
	
	Рез=РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
	ПунктПогрузки = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Документ.Организация, Документ.Дата),"ФактическийАдрес");
	
	Если СокрЛП(Документ.АдресДоставки) <> "" Тогда
		ПунктРазгрузки = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Документ.АдресДоставки);
	Иначе
		ПунктРазгрузки = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(?(ЗначениеЗаполнено(Документ.Грузополучатель),Документ.Грузополучатель,Документ.Контрагент), Документ.Дата), "ФактическийАдрес");
	КонецЕсли;
	
	Если Рез.Значение=Неопределено Тогда
		Сообщить("Не указан Экспедитор в документе. Автоматическое заполнение не выполнено");
		Возврат;
	Иначе
		Водитель=Рез.Значение;
		ВодительПриИзменении(Неопределено);
	КонецЕсли;
	
	
	
КонецПроцедуры

// Процедура считывает ФИО физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция ФИО(Ссылка)
	
	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	
	Фамилия  = ФИОСрез.Фамилия;
	Имя      = ФИОСрез.Имя;
	Отчество = ФИОСрез.Отчество;
	Возврат Фамилия+" "+Сред(Имя,1,1)+"."+Сред(Отчество,1,1)+".";
	
КонецФункции 

Функция СформироватьНомерНаПечать(Номер) 
	НомерТемп=Сред(Номер,Найти(Номер,"0")+1);
	Пока Лев(НомерТемп, 1)="0" Цикл
		НомерТемп = Сред(НомерТемп, 2);
	КонецЦикла;	
	Возврат НомерТемп;
КонецФункции




//КТ-2000-(095)789-3070/////////////////////////////////////////////////////////
// Функции и процедуры для использования внешними данными

// Внешняя функция печати
// КТ-2000: (095)789-3070
// Параметры
//  ИмяМакета  – Строка – имя формы печати
//
// Возвращаемое значение:
//   Булево   –Печать прошла успешно - Истина, иначе - Ложь
//
Функция Печать(ИмяМакета = "", ПараметрыПечати = Неопределено)	Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Документ=СсылкаНаОбъект;
	ЗаполнитьПоСвойствам();
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Предупреждение("Не выбран документ!");
		Возврат Неопределено;
	КонецЕсли;
	
	
	ТабДокумент=Новый ТабличныйДокумент;
	
	ТабДокументТОРГ12=ПечатьТОРГ12(Документ,Истина);
	ТабДокументТТН = ПечатьТТН();
	
	МассивПроверки=НОвый Массив;
	МассивПроверки.Добавить(ТабДокументТОРГ12);
	МассивПроверки.Добавить(ТабДокументТТН);
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	
	ТабДокумент.Вывести(ТабДокументТОРГ12);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ТабДокумент.Вывести(ТабДокументТТН);
	
	// Степанов ++, #1208347, 01.07.2016
	// Закомментил, чтобы разбить печатную форму на две
	//Ищем документ с тарой
	//ДокументСТарой=Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("ДокументОснование",Документ.Ссылка).Ссылка;
	//Если ЗначениеЗаполнено(ДокументСТарой) Тогда
	//	ТабДокументТОРГ12=ПечатьТОРГ12(ДокументСТарой,Ложь);
	//	//ТабДокументТТН=ПечатьТТН(ДокументСТарой);
	//	// Степанов ++, #1208347, 01.07.2016
	//	//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	//Если (НомерСтраницы / 2) = Цел(НомерСтраницы / 2) Тогда
	//	//	Сообщить("равно, " + НомерСтраницы);
	//	//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	//Иначе
	//	//	Сообщить("не равно, " + НомерСтраницы);
	//	//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	//	ТабДокумент.Вывести(Новый ТабличныйДокумент);
	//	//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	//КонецЕсли;	
	//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	ТабДокумент.Вывести(Новый ТабличныйДокумент);
	//	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	// Степанов --
	//	ТабДокумент.Вывести(ТабДокументТОРГ12);
	//	//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//	//ТабДокумент.Вывести(ТабДокументТТН);
	//КонецЕсли;
	// Степанов
	
	Возврат ТабДокумент;
КонецФункции // Печать()


Функция ПолучитьТаблицуГрупп(Спс)
//Сообщить("ё");	
	ТзВозврат=Новый ТаблицаЗначений;
	ТзВозврат.Колонки.Добавить("Группа");
	ТзВозврат.Колонки.Добавить("Уровень");
	ТзВозврат.Колонки.Добавить("ДляСвертки");
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Группа,
	|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&Спс)
	|
	|ИТОГИ ПО 
	|	Группа ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Спс",Спс);
	ТЗ=Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из ТЗ Цикл
//		Сообщить(""+Стр.Группа);
		Попытка
			Если Стр.ЭтоГруппа Тогда
				СтрВ_ТзВозврат=ТзВозврат.Добавить();
				СтрВ_ТзВозврат.Группа=Стр.Группа.Ссылка;
				СтрВ_ТзВозврат.Уровень=Стр.Группа.Уровень();
				СтрВ_ТзВозврат.ДляСвертки=1;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	ТзВозврат.Свернуть("Группа,Уровень","ДляСвертки");
	ТзВозврат.Сортировать("Уровень,Группа");
//Сообщить("ё2");	
	Возврат ТзВозврат;
КонецФункции

Процедура СортироватьПоРодителю(ТабличнаяЧастьИн) Экспорт;
	
	ТабличнаяЧасть = ТабличнаяЧастьИн.Скопировать();
	ТабличнаяЧасть.Колонки.Добавить("Родитель");
	Для Каждого Стр Из ТабличнаяЧасть Цикл
		Стр.Родитель=Стр.Номенклатура.Родитель.Ссылка;
	КонецЦикла;
	ТабличнаяЧастьНовая = ТабличнаяЧастьИн.Скопировать();
	ТабличнаяЧастьНовая.Очистить();
	Состояние("Вычисление групп номенклатуры");
	
	ТзДляСпискаНомен=Новый ТаблицаЗначений;
	ТзДляСпискаНомен=ТабличнаяЧасть.Скопировать();
	ТзДляСпискаНомен.Свернуть("Номенклатура","Количество");
	СпсНоменДляГрупп=Новый СписокЗначений;
	Для Каждого Стр Из ТзДляСпискаНомен Цикл
		СпсНоменДляГрупп.Добавить(Стр.Номенклатура);
	КонецЦикла;
	ТзГрупп=ПолучитьТаблицуГрупп(СпсНоменДляГрупп);	
	//Создадим массив групп 0 уровня
	СтруктураОтбора=Новый Структура("Уровень",0);
	МассивГруппУровня0=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//Создадим массив групп 1 уровня
	СтруктураОтбора=Новый Структура("Уровень",1);
	МассивГруппУровня1=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//Создадим массив групп 2 уровня
	СтруктураОтбора=Новый Структура("Уровень",2);
	МассивГруппУровня2=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//Создадим массив групп 3 уровня
	СтруктураОтбора=Новый Структура("Уровень",3);
	МассивГруппУровня3=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//Создадим массив групп 3 уровня
	СтруктураОтбора=Новый Структура("Уровень",4);
	МассивГруппУровня4=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
//		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Строка,,СписокИсключаемыхСвойств);
	Ном=0;
	Для Каждого Стр0 Из МассивГруппУровня0 Цикл
		//Пробуем вывести элементы которые могут быть внутри этой группы
		СтруктураОтбора=Новый Структура("Родитель",Стр0.Группа);
		МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрНомен Из МассивСтрок Цикл
			Ном=Ном+1;
//Сообщить("1"+ СтрНомен.Номенклатура);
			НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
		КонецЦикла;
		Для Каждого Стр1 Из МассивГруппУровня1 Цикл
			Если Стр1.Группа.Родитель.Ссылка<>Стр0.Группа.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			//Пробуем вывести элементы которые могут быть внутри этой группы
			СтруктураОтбора=Новый Структура("Родитель",Стр1.Группа);
			МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрНомен Из МассивСтрок Цикл
				Ном=Ном+1;
//Сообщить("2"+ СтрНомен.Номенклатура);
				НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
			КонецЦикла;
			Для Каждого Стр2 Из МассивГруппУровня2 Цикл
				Если Стр2.Группа.Родитель.Ссылка<>Стр1.Группа.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				//Пробуем вывести элементы которые могут быть внутри этой группы
				СтруктураОтбора=Новый Структура("Родитель",Стр2.Группа);
				МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрНомен Из МассивСтрок Цикл
					Ном=Ном+1;
//Сообщить("4"+ СтрНомен.Номенклатура);
					НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
				КонецЦикла;
				Для Каждого Стр3 Из МассивГруппУровня3 Цикл
					Если Стр3.Группа.Родитель.Ссылка<>Стр2.Группа.Ссылка Тогда
						Продолжить;
					КонецЕсли;
					//Пробуем вывести элементы которые могут быть внутри этой группы
					СтруктураОтбора=Новый Структура("Родитель",Стр3.Группа);
					МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
					Для Каждого СтрНомен Из МассивСтрок Цикл
						Ном=Ном+1;
//Сообщить("5"+ СтрНомен.Номенклатура);
						НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
					КонецЦикла;
					Для Каждого Стр4 Из МассивГруппУровня4 Цикл
						Если Стр4.Группа.Родитель.Ссылка<>Стр3.Группа.Ссылка Тогда
							Продолжить;
						КонецЕсли;
						//Пробуем вывести элементы которые могут быть внутри этой группы
						СтруктураОтбора=Новый Структура("Родитель",Стр4.Группа);
						МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
						Для Каждого СтрНомен Из МассивСтрок Цикл
							Ном=Ном+1;
//Сообщить("6"+ СтрНомен.Номенклатура);
							НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
	ТабличнаяЧастьИн=ТабличнаяЧастьНовая.Скопировать();
	
КонецПроцедуры 


мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");