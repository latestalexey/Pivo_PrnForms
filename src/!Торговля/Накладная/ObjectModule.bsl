Перем мВалютаРегламентированногоУчета Экспорт;
Перем ВидФормы Экспорт;
Перем НаименованиеФормы	Экспорт;
Перем РелизФормы	Экспорт;
Перем ДатаИзмененияФормы Экспорт;
Перем КомментарийФормы Экспорт;
Перем НазваниеКнопки Экспорт;
Перем НазваниеМеню Экспорт;
Перем КартинкаКнопки Экспорт;
// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказаКорректировки(СсылкаНаОбъект,СуммыВРублях = Ложь)
	ФормаQR = ЭтотОбъект.ПолучитьФорму("ФормаQR");
	ФормаQR.Открыть();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.АдресДоставки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов,
	|	МаршрутныйЛист.Ссылка КАК МаршрутныйЛист
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛист КАК МаршрутныйЛист
	|		ПО РеализацияТоваровУслуг.Ссылка = МаршрутныйЛист.СписокДокументов.Накладная
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТекстКурс = "";
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Наименование КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество,
	|	ВложенныйЗапросПоТоварам.КоличествоМест,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	ВложенныйЗапросПоТоварам.Цена,
	|	ВложенныйЗапросПоТоварам.Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС,
	|	ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
	|	ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВложенныйЗапросПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапросПоТоварам.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
	|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапросПоТоварам.Метка КАК Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.НомерСтроки КАК ПорядковыйНомер,
	|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.Цена КАК Цена,
	|		РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
	|		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|		И РеализацияТоваровУслуг.Номенклатура В ИЕРАРХИИ (&гр01, &гр04, &гр15_Незамерзайка, &гр19_ВодаСТМ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.НомерСтроки,
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		РеализацияТоваровУслуг.СерияНоменклатуры,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.НомерГТД,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапросПоТоварам.Номенклатура.Родитель.Наименование";
	
	Запрос.УстановитьПараметр("гр01", Справочники.ИТИКонстанты.НайтиПоКоду("р00000001").Указатель);	
	Запрос.УстановитьПараметр("гр02", Справочники.ИТИКонстанты.НайтиПоКоду("р00000002").Указатель);	
	Запрос.УстановитьПараметр("гр04", Справочники.ИТИКонстанты.НайтиПоКоду("р00000004").Указатель);	
	Запрос.УстановитьПараметр("гр15_Незамерзайка", Справочники.Номенклатура.НайтиПоКоду("00000030936"));	
	Запрос.УстановитьПараметр("гр19_ВодаСТМ", Справочники.Номенклатура.НайтиПоКоду("00000009770"));	
	
	ТоварыПиво = Запрос.Выполнить().Выгрузить();
	флВыводитьМест = истина;
	Если ТоварыПиво.Итог("КоличествоМест")=0 Тогда
		флВыводитьМест = ложь;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Наименование КАК Товар,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
	|	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество,
	|	ВложенныйЗапросПоТоварам.КоличествоМест,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	ВложенныйЗапросПоТоварам.Цена,
	|	ВложенныйЗапросПоТоварам.Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС,
	|	ВложенныйЗапросПоТоварам.ПроцентСкидкиНаценки КАК Скидка,
	|	ВложенныйЗапросПоТоварам.ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВложенныйЗапросПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапросПоТоварам.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапросПоТоварам.СерияНоменклатуры КАК Серия,
	|	ВложенныйЗапросПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапросПоТоварам.Метка КАК Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.НомерСтроки КАК ПорядковыйНомер,
	|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.Цена КАК Цена,
	|		РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
	|		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки,
	|		0 КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|		И НЕ РеализацияТоваровУслуг.Номенклатура В ИЕРАРХИИ (&гр01, &гр04, &гр15_Незамерзайка, &гр19_ВодаСТМ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.НомерСтроки,
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		РеализацияТоваровУслуг.СерияНоменклатуры,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.НомерГТД,
	|		РеализацияТоваровУслуг.СерияНоменклатуры.СтранаПроисхождения) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапросПоТоварам.Номенклатура.Родитель.Наименование";
	
	Запрос.УстановитьПараметр("гр01", Справочники.ИТИКонстанты.НайтиПоКоду("р00000001").Указатель);	
	Запрос.УстановитьПараметр("гр02", Справочники.ИТИКонстанты.НайтиПоКоду("р00000002").Указатель);	
	Запрос.УстановитьПараметр("гр04", Справочники.ИТИКонстанты.НайтиПоКоду("р00000004").Указатель);	
	Запрос.УстановитьПараметр("гр15_Незамерзайка", Справочники.Номенклатура.НайтиПоКоду("00000030936"));	
	Запрос.УстановитьПараметр("гр19_ВодаСТМ", Справочники.Номенклатура.НайтиПоКоду("00000009770"));	
	
	ТоварыСнеки = Запрос.Выполнить().Выгрузить();
	
	
	//Запрос на услуги	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL КАК Поле1,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	NULL КАК Поле2,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|	NULL КАК Поле3,
	|	NULL КАК Поле4,
	|	NULL КАК Поле5,
	|	NULL КАК Поле6,
	|	NULL КАК Поле7,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	1 КАК Поле8,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК НоменклатураРодительНаименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураРодительНаименование";
	
	Услуги = Запрос.Выполнить().Выгрузить();
	
	
	//Запрос на тару
	Запрос = Новый Запрос;
	//Документ с тарой
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.Наименование КАК Тара,
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровУслуг.Количество КАК Количество,
	|	NULL КАК Поле1,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	NULL КАК Поле2,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	0 КАК Поле3,
	|	0 КАК Поле4,
	|	NULL КАК Поле5,
	|	NULL КАК Поле6,
	|	NULL КАК Поле7,
	|	NULL КАК Поле8,
	|	NULL КАК Поле9,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	2 КАК Поле10,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК НоменклатураРодительНаименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.ДокументОснование = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код,
	|	РеализацияТоваровУслуг.Номенклатура.Артикул,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	2,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураРодительНаименование";
	Тара = Запрос.Выполнить().Выгрузить();
	
	КоличествоПива		= ТоварыПиво.Количество();
	КоличествоСнеки		= ТоварыСнеки.Количество();
	КоличествоТара		= Тара.Количество();
	КоличествоТовара	= КоличествоПива+КоличествоСнеки+КоличествоТара;
	
	КоличествоУслуги	= Услуги.Количество();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	
	Макет = ПолучитьМакет("Накладная");
	Если КоличествоПива+КоличествоТара > 0 Тогда
		// Выводим шапку накладной
		//Закголовок
		
		
		//ОбластьМакетаШК = Макет.ПолучитьОбласть("ШтрихКод");
		//ТДШК = Новый ТабличныйДокумент;
		//ТДШК.Вывести(ОбластьМакетаШК); 		
		//ШК = "RTU_" + Строка(ЭтотОбъект.СсылкаНаОбъект.УникальныйИдентификатор());
		//
		//ТДШК.Рисунки.ШК.Объект.ТипКода = 4;
		//ТДШК.Рисунки.ШК.Объект.Сообщение = ШК;
		//ТДШК.Рисунки.ШК.Объект.Пропорции = 	"1:2";
		//ТабДокумент.Вывести(ТДШК);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		//ОбластьМакета.Рисунки.ШК.ТипКода = 4;
		//ОбластьМакета.Рисунки.ШК.Объект.Сообщение = ШК;
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Расходная накладная");
		//20120301 Лямкина Юлия
		ОбластьМакета.Параметры.Склад = СсылкаНаОбъект.Склад;
		Если КоличествоСнеки>0 Тогда
			ОбластьМакета.Параметры.Снеки = "+Снеки"
		КонецЕсли;
		//20120301 Лямкина Юлия
		ТабДокумент.Вывести(ОбластьМакета);
				
		//ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета = Макет.ПолучитьОбласть("ПокупательПоставщик");
		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "Представление,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		//ТабДокумент.Вывести(ОбластьМакета);
		
		//ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		
		СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.Дата);
		Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
			ОбластьМакета.Параметры.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Шапка.АдресДоставки);
		Иначе
			ОбластьМакета.Параметры.АдресДоставки = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		КонецЕсли;
		
		//20120301 Лямкина Юлия
		ОбластьМакета.Параметры.Комментарий = СсылкаНаОбъект.Комментарий;
		ОбластьМакета.Параметры.Безнал = ?(СсылкаНаОбъект.ОтражатьВБухгалтерскомУчете И СсылкаНаОбъект.ОтражатьВУправленческомУчете, "Да", "Нет");
		//20120301 Лямкина Юлия
		
		//20130217  Кристина вытащим предоставление
		ЗапросПредоставление = Новый Запрос;
		ЗапросПредоставление.Текст = "ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
		ЗапросПредоставление.УстановитьПараметр("Объект",?(СсылкаНаОбъект.Грузополучатель.ГоловнойКонтрагент=СсылкаНаОбъект.Контрагент,СсылкаНаОбъект.Грузополучатель,СсылкаНаОбъект.Контрагент));
		ЗапросПредоставление.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Предоставление"));
		Результат = ЗапросПредоставление.Выполнить().Выбрать();
		Если Результат.Количество() >0 тогда
			Результат.Следующий();
			ОбластьМакета.Параметры.Предоставление = Результат.Значение;//?(СокрЛП(Строка(Шапка.Предоставление))="","нет",Шапка.Предоставление);
		иначе
			ОбластьМакета.Параметры.Предоставление = "нет";
		КонецЕсли;
		//\\20130217  Кристина
		КартинкаQR = Новый Картинка(КаталогВременныхФайлов() + "RTU_" + Строка(ЭтотОбъект.СсылкаНаОбъект.УникальныйИдентификатор()) + ".gif");
		ОбластьМакета.Рисунки.QR.Картинка = КартинкаQR;	

		
		ТабДокумент.Вывести(ОбластьМакета);
		//KAV++ 15-07-2014 Крапивин Андрей. Вывод "Забрать не менее" для самовывоза
		Если СсылкаНаОбъект.Самовывоз Тогда
			ОбластьМакета=Макет.ПолучитьОбласть("ЗабратьКег");
			КегКВозврату=0;
			Если НЕ СсылкаНаОбъект.Контрагент.КонтрагентСверен Тогда
				КегКВозврату=РегистрыСведений.РасчетВозвратаКег.ПолучитьПоследнее(СсылкаНаОбъект.Дата,Новый Структура("Контрагент,Грузополучатель",СсылкаНаОбъект.Контрагент,?(СсылкаНаОбъект.Грузополучатель = Справочники.Контрагенты.ПустаяСсылка(),СсылкаНаОбъект.Контрагент,СсылкаНаОбъект.Грузополучатель))).КолКегКВозврату;
			Иначе
				ЗапросКег				= Новый Запрос;
				ЗапросКег.Текст			= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТоварыПереданныеОстаткиГрузополучатель.КоличествоОстаток КАК КоличествоОстатокГрузополучатель
				|ИЗ
				|	РегистрНакопления.ТоварыПереданные.Остатки(
				|			&КонПериодаГр,
				|			СтатусПередачи = &СтатусПередачи
				|				И Контрагент = &Контрагент
				|				И Грузополучатель = &Грузополучатель
				|				И (Номенклатура = &КегаПивко
				|					ИЛИ Номенклатура = &КегаШихан
				|					ИЛИ Номенклатура = &КегаТагил)) КАК ТоварыПереданныеОстаткиГрузополучатель";
				
				ЗапросКег.УстановитьПараметр("СтатусПередачи",Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
				ЗапросКег.УстановитьПараметр("КегаПивко",Справочники.Номенклатура.НайтиПоКоду("00000000141"));
				ЗапросКег.УстановитьПараметр("КегаШихан",Справочники.Номенклатура.НайтиПоКоду("00000000146"));
				ЗапросКег.УстановитьПараметр("КегаТагил",Справочники.Номенклатура.НайтиПоКоду("00000000144"));
				
				ЗапросСвойства			= Новый Запрос;
				ЗапросСвойства.Текст	= "ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Значение КАК Значение
				|ИЗ
				|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Объект = &Объект
				|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
				ДокСТарой=Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("ДокументОснование",СсылкаНаОбъект).Ссылка;
				Если Не ЗначениеЗаполнено(ДокСТарой) Тогда
					ДокСТарой=СсылкаНаОбъект;
				КонецЕсли;
				ЗапросКег.УстановитьПараметр("КонПериодаГр",Новый Граница(ДокСТарой.МоментВремени(),ВидГраницы.Включая));
				ЗапросКег.УстановитьПараметр("Грузополучатель",СсылкаНаОбъект.Грузополучатель);
				ЗапросКег.УстановитьПараметр("Контрагент",СсылкаНаОбъект.Контрагент);
				РезультатКег = ЗапросКег.Выполнить().Выбрать();
				
				ЗапросСвойства.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Лимит КЕГИ"));
				ЗапросСвойства.УстановитьПараметр("Объект",СсылкаНаОбъект.Грузополучатель);
				РезультатСвойстваКег = ЗапросСвойства.Выполнить().Выбрать();
				Если РезультатСвойстваКег.Следующий() Тогда
					Попытка
						Если РезультатСвойстваКег.Значение<>NULL тогда
							ЛимитКегиГрузополучатель = Число(РезультатСвойстваКег.Значение.Наименование);
						КонецЕсли;
					Исключение
						Сообщить("Не удалось определить лимит кеги для контрагента "+Строка(СсылкаНаОбъект.Грузополучатель));
						ЛимитКегиГрузополучатель =0;
					КонецПопытки;
				Иначе
					ЛимитКегиГрузополучатель =0;
				КонецЕсли;
				Если РезультатКег.Следующий() Тогда
					КегКВозврату=РезультатКег.КоличествоОстатокГрузополучатель-ЛимитКегиГрузополучатель;
					Если КегКВозврату<0 Тогда
						КегКВозврату=0;
					КонецЕсли;
				Иначе
					КегКВозврату=0;
				КонецЕсли;	
			КонецЕсли;
			ОбластьМакета.Параметры.ЗабратьКег=КегКВозврату;	
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		//KAV--
		//KAV++ Крапивин Андрей. 31.12.2014 9:53:05 # . Выводим номер маршрутного листа
		Если ЗначениеЗаполнено(Шапка.МаршрутныйЛист) Тогда
			ОбластьМакета=Макет.ПолучитьОбласть("МаршрутныйЛист");
			ОбластьМакета.Параметры.МаршрутныйЛист="№ "+Шапка.МаршрутныйЛист.Номер+" от "+Формат(Шапка.МаршрутныйЛист.Дата,"ДЛФ=DD");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		//KAV-- Крапивин Андрей. 31.12.2014 9:58:02
		
		ЕстьСкидки = ТоварыПиво.Итог("Скидка") + ТоварыПиво.Итог("АвтоматическаяСкидка") <> 0;
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;
		
		//ПИВО
		Если КоличествоПива > 0 Тогда
			//Str+ Заголовок
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			
			ОбластьМакета.Параметры.ТекстЗаголовка = "ПИВО";
			//20120301 Лямкина Юлия
			ОбластьМакета.Параметры.Склад = СсылкаНаОбъект.Склад;
			//20120301 Лямкина Юлия
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
			ОбластьМест   = Макет.ПолучитьОбласть("ШапкаТаблицы|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			Если флВыводитьМест Тогда
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			ОбластьКолонкаТовар = Макет.Область("Товар");
			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				Макет.Область("КолонкаКодов").ШиринаКолонки;
			КонецЕсли;
			//Если НЕ ЕстьСкидки Тогда
			//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			//	Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			//	Макет.Область("СуммаСкидки").ШиринаКолонки;
			//КонецЕсли;
			
			Если не флВыводитьМест Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				ФормированиеПечатныхФорм.РасчетШириныОбластиМакета("Мест", Макет);
			КонецЕсли;
			
			
			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
			ОбластьМест  = Макет.ПолучитьОбласть("Строка|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			
			Сумма    = 0;
			СуммаНДС = 0;
			ВсегоСкидок    = 0;
			ВсегоБезСкидок = 0;
			КоэфКурса=Неопределено;
			СуммыВРублях=Ложь;
			КоэфКурса = ?( СуммыВРублях, Шапка.КурсВзаиморасчетов / Шапка.КратностьВзаиморасчетов, 1);
			Состояние("Сортировка ПИВА по иерархии");
			СортироватьПоРодителю(ТоварыПиво);
			Для каждого ВыборкаСтрокТовары из ТоварыПиво Цикл 
				
				Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
					Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьНомера.Параметры.НомерСтроки = ТоварыПиво.Индекс(ВыборкаСтрокТовары) + 1;
				ТабДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
					КонецЕсли;
					// + Хам 2016_10_17
	        		ЗапросШк=Новый Запрос;
					ЗапросШк.Параметры.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
					ЗапросШк.Текст = "ВЫБРАТЬ
					                 |	ШК.Штрихкод КАК ШтрихКод,
					                 |	ШК.Владелец КАК Владелец,
					                 |	ШК.ТипШтрихкода,
					                 |	ШК.ПредставлениеШтрихкода
					                 |ИЗ
					                 |	РегистрСведений.Штрихкоды КАК ШК
					                 |ГДЕ
					                 |	ШК.Владелец = &Номенклатура";
					РезультатЗапроса=ЗапросШк.Выполнить().Выгрузить();
					Для Каждого Строка ИЗ РезультатЗапроса Цикл
						ОбластьКодов.Параметры.Артикул = Строка.ШтрихКод;
						Прервать;
					КонецЦикла;
					// - Хам					
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьТовар.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар)
				+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
				+ ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");		
				ТабДокумент.Присоединить(ОбластьТовар);
				
				Если флВыводитьМест Тогда
					ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
					ТабДокумент.Присоединить(ОбластьМест);
				КонецЕсли;
				
				СуммаРуб = Окр(ВыборкаСтрокТовары.Сумма * КоэфКурса, 2, 1);
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
				//ОбластьДанных.Параметры.Цена  = ?(ВыборкаСтрокТовары.Количество = 0, СуммаРуб, Окр( СуммаРуб / ВыборкаСтрокТовары.Количество, 2, 1));
				ОбластьДанных.Параметры.Цена  = Окр(ВыборкаСтрокТовары.Цена * КоэфКурса, 2, 1);
				
				ТабДокумент.Присоединить(ОбластьДанных);
				
				// Скидка может быть NULL
				ПроцентСкидки = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка),ВыборкаСтрокТовары.Скидка,0) 
				+ ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),ВыборкаСтрокТовары.АвтоматическаяСкидка,0);
				
				Скидка = Ценообразование.ПолучитьСуммуСкидки(СуммаРуб, ПроцентСкидки);
				
				Если ЕстьСкидки Тогда
					ОбластьСкидок.Параметры.Скидка         = Скидка;
					ОбластьСкидок.Параметры.СуммаБезСкидки = ?(СуммыВРублях, СуммаРуб, ВыборкаСтрокТовары.Сумма) + Скидка;
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				
				ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
				Если СуммыВРублях Тогда
					ОбластьСуммы.Параметры.Сумма = СуммаРуб;
				КонецЕсли;
				
				ТабДокумент.Присоединить(ОбластьСуммы);
				Если СуммыВРублях Тогда
					Сумма          = Сумма       + СуммаРуб;
					СуммаНДС       = СуммаНДС    + Окр( ВыборкаСтрокТовары.СуммаНДС * КоэфКурса, 2, 1);
				Иначе
					Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
					СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
				КонецЕсли;
				ВсегоСкидок    = ВсегоСкидок + Скидка;
				ВсегоБезСкидок = Сумма       + ВсегоСкидок;
				
			КонецЦикла;
			
			
			// Вывести Итого
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТовар|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТовар|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ИтогоТовар|Товар");
			ОбластьМест  = Макет.ПолучитьОбласть("ИтогоТовар|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТовар|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоТовар|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТовар|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			Если флВыводитьМест Тогда
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
				ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			// Вывести ИтогоНДС
			Если Шапка.УчитыватьНДС Тогда
				ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДСТовар|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДСТовар|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ИтогоНДСТовар|Товар");
				ОбластьМест  = Макет.ПолучитьОбласть("ИтогоНДСТовар|Мест");
				ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДСТовар|КоличествоЦена");
				ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДСТовар|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДСТовар|Сумма");
				
				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьТовар);
				Если флВыводитьМест Тогда
					ТабДокумент.Присоединить(ОбластьМест);
				КонецЕсли;
				
				ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
				ТабДокумент.Присоединить(ОбластьСуммы);
			КонецЕсли;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюТовар");
			СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
			Если СуммыВРублях Тогда
				ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ТоварыПиво.Количество()
				+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
				ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
			Иначе
				ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ТоварыПиво.Количество()
				+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
				ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
			// Вывести подписи
			Если КоличествоСнеки > 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПодписиБезАкта");
			КонецЕсли;
		КонецЕсли;
		
		
		
		//Dime Добавляем Тару и Подписи/////////////////////////////////////////////////////////
		
		//Заполнние ТаблицТара
		//Если ЗначениеЗаполнено(ВыборкаСтрокТары.Количество)=Истина Тогда
		Если КоличествоТара > 0 Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицыТара|Товар");
			ОбластьМест   = Макет.ПолучитьОбласть("ШапкаТаблицыТара|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицыТара|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			Если флВыводитьМест Тогда
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			ОбластьКолонкаТовар = Макет.Область("Товар");
			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				Макет.Область("КолонкаКодов").ШиринаКолонки;
			КонецЕсли;
			Если НЕ ЕстьСкидки Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				Макет.Область("СуммаБезСкидки").ШиринаКолонки +
				Макет.Область("СуммаСкидки").ШиринаКолонки;
			КонецЕсли;
			
			Если не флВыводитьМест Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				ФормированиеПечатныхФорм.РасчетШириныОбластиМакета("Мест", Макет);
			КонецЕсли;
			
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТара|Товар");
			ОбластьМест  = Макет.ПолучитьОбласть("СтрокаТара|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("СтрокаТара|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|Сумма");
			
			Сумма    = 0;
			СуммаНДС = 0;
			ВсегоСкидок    = 0;
			ВсегоБезСкидок = 0;
			КоэфКурса=Неопределено;
			СуммыВРублях=Ложь;
			КоэфКурса = ?( СуммыВРублях, Шапка.КурсВзаиморасчетов / Шапка.КратностьВзаиморасчетов, 1);
			Состояние("Сортировка ТАРЫ по иерархии");
			СортироватьПоРодителю(Тара);
			Для каждого ВыборкаСтрокТары из Тара Цикл 
				
				Если Не ЗначениеЗаполнено(ВыборкаСтрокТары.Номенклатура) Тогда
					Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьНомера.Параметры.НомерСтроки = Тара.Индекс(ВыборкаСтрокТары) + 1;
				ТабДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТары.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТары.Код;
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТары);
				ОбластьТовар.Параметры.Товар = СокрЛП(ВыборкаСтрокТары.Тара);
				//+ ?(ВыборкаСтрокТары.Метка = 2, " (возвратная тара)", "");		
				ТабДокумент.Присоединить(ОбластьТовар);
				
				Если флВыводитьМест Тогда
					ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТары);
					ТабДокумент.Присоединить(ОбластьМест);
				КонецЕсли;
				
				СуммаРуб = Окр(ВыборкаСтрокТары.Сумма * КоэфКурса, 2, 1);
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТары);
				//ОбластьДанных.Параметры.Цена  = ?(ВыборкаСтрокТовары.Количество = 0, СуммаРуб, Окр( СуммаРуб / ВыборкаСтрокТовары.Количество, 2, 1));
				//20120328 Лямкина Юлия
				//ОбластьДанных.Параметры.Цена  = Окр(ВыборкаСтрокТары.Цена * КоэфКурса, 2, 1);
				ОбластьДанных.Параметры.Цена  = 0;
				//20120328 Лямкина Юлия
				
				ТабДокумент.Присоединить(ОбластьДанных);
				
				// Скидка может быть NULL
				//ПроцентСкидки = ?(ЗначениеЗаполнено(ВыборкаСтрокТары.Скидка),ВыборкаСтрокТары.Скидка,0) 
				//+ ?(ЗначениеЗаполнено(ВыборкаСтрокТары.АвтоматическаяСкидка),ВыборкаСтрокТары.АвтоматическаяСкидка,0);
				
				//Скидка = Ценообразование.ПолучитьСуммуСкидки(СуммаРуб, ПроцентСкидки);
				
				//Если ЕстьСкидки Тогда
				//	ОбластьСкидок.Параметры.Скидка         = Скидка;
				//	ОбластьСкидок.Параметры.СуммаБезСкидки = ?(СуммыВРублях, СуммаРуб, ВыборкаСтрокТары.Сумма) + Скидка;
				//	ТабДокумент.Присоединить(ОбластьСкидок);
				//КонецЕсли;
				
				ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТары);
				Если СуммыВРублях Тогда
					ОбластьСуммы.Параметры.Сумма = СуммаРуб;
				КонецЕсли;
				//20120328 Лямкина Юлия
				ОбластьСуммы.Параметры.Сумма = 0;
				//20120328 Лямкина Юлия
				
				//ОбластьСуммы.Параметры.НомерГТДСтранаПроисхождения = ?(ЗначениеЗаполнено(ВыборкаСтрокТары.НомерГТД),
				//СокрЛП(ВыборкаСтрокТары.НомерГТД.Код)+",", "") + Символы.ПС + ВыборкаСтрокТары.СтранаПроисхождения;		
				
				ТабДокумент.Присоединить(ОбластьСуммы);
				Если СуммыВРублях Тогда
					Сумма          = Сумма       + СуммаРуб;
					//СуммаНДС       = СуммаНДСТовар;
				Иначе
					Сумма          = Сумма       + ВыборкаСтрокТары.Сумма;
					//СуммаНДС       = СуммаНДСТовар;
				КонецЕсли;
				//		ВсегоСкидок    = ВсегоСкидок + Скидка;
				ВсегоБезСкидок = Сумма       + ВсегоСкидок;
				
				//20120328 Лямкина Юлия
				Сумма = 0;
				ВсегоБезСкидок = 0;
				//20120328 Лямкина Юлия
			КонецЦикла;
			
			
			// Вывести Итого
			ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("Итого|Товар");
			ОбластьМест  = Макет.ПолучитьОбласть("Итого|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("Итого|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			Если флВыводитьМест Тогда
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
				ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			// Вывести ИтогоНДС
			Если Шапка.УчитыватьНДС Тогда
				ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
				ОбластьМест  = Макет.ПолучитьОбласть("ИтогоНДС|Мест");
				ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|КоличествоЦена");
				ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
				
				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьТовар);
				Если флВыводитьМест Тогда
					ТабДокумент.Присоединить(ОбластьМест);
				КонецЕсли;
				
				ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
				ТабДокумент.Присоединить(ОбластьСуммы);
			КонецЕсли;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
			
			Если СуммыВРублях Тогда
				ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + КоличествоТара
				+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
				ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
			Иначе
				ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + КоличествоТара
				+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
				ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Вывести подписи
		Если СсылкаНаОбъект.Самовывоз Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиБезАкта");
		КонецЕсли;
		
		
		// Отпуск товара произвел
		Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.Дата);
			ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
			ОбластьМакета.Параметры.ОтветственныйПредставление = ФИООтпускПроизвел;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	//dime/////////////////////////////////////////////////////////
	
	
	Если  КоличествоПива > 0 и КоличествоСнеки  > 0  Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//ОбластьМакетаШК = Макет.ПолучитьОбласть("ШтрихКод");
		//ТДШК = Новый ТабличныйДокумент;
		//ТДШК.Вывести(ОбластьМакетаШК); 		
		//ШК = "RTU_" + Строка(ЭтотОбъект.СсылкаНаОбъект.УникальныйИдентификатор());
		//
		//ТДШК.Рисунки.ШК.Объект.ТипКода = 4;
		//ТДШК.Рисунки.ШК.Объект.Сообщение = ШК;
		//ТабДокумент.Вывести(ТДШК);
	КонецЕсли;
	
	//Dime Добавить шапку для НЕ ПИВО /////////////////////////////
	Если КоличествоСнеки > 0 Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
				
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Расходная накладная");
		//20120301 Лямкина Юлия
		ОбластьМакета.Параметры.Склад = СсылкаНаОбъект.Склад;
		//20120301 Лямкина Юлия
		ТабДокумент.Вывести(ОбластьМакета);
		
		//ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета = Макет.ПолучитьОбласть("ПокупательПоставщик");

		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "Представление,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		//ТабДокумент.Вывести(ОбластьМакета);
		
		//ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		
		СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.Дата);
		Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
			ОбластьМакета.Параметры.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Шапка.АдресДоставки);
		Иначе
			ОбластьМакета.Параметры.АдресДоставки = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ФактическийАдрес");
		КонецЕсли;
		
		//20120301 Лямкина Юлия
		ОбластьМакета.Параметры.Комментарий = СсылкаНаОбъект.Комментарий;
		ОбластьМакета.Параметры.Безнал = ?(СсылкаНаОбъект.ОтражатьВБухгалтерскомУчете И СсылкаНаОбъект.ОтражатьВУправленческомУчете, "Да", "Нет");
		//20120301 Лямкина Юлия
		
		//20130217  Кристина вытащим предоставление
		ЗапросПредоставление = Новый Запрос;
		ЗапросПредоставление.Текст = "ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
		ЗапросПредоставление.УстановитьПараметр("Объект",?(СсылкаНаОбъект.Грузополучатель.ГоловнойКонтрагент=СсылкаНаОбъект.Контрагент,СсылкаНаОбъект.Грузополучатель,СсылкаНаОбъект.Контрагент));
		ЗапросПредоставление.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Предоставление"));
		Результат = ЗапросПредоставление.Выполнить().Выбрать();
		Если Результат.Количество() >0 тогда
			Результат.Следующий();
			ОбластьМакета.Параметры.Предоставление = Результат.Значение;//?(СокрЛП(Строка(Шапка.Предоставление))="","нет",Шапка.Предоставление);
		иначе
			ОбластьМакета.Параметры.Предоставление = "нет";
		КонецЕсли;
		//\\20130217  Кристина
		
		КартинкаQR = Новый Картинка(КаталогВременныхФайлов() + "RTU_" + Строка(ЭтотОбъект.СсылкаНаОбъект.УникальныйИдентификатор()) + ".gif");
		ОбластьМакета.Рисунки.QR.Картинка = КартинкаQR;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		//KAV++ Крапивин Андрей. 31.12.2014 9:53:05 # . Выводим номер маршрутного листа
		Если ЗначениеЗаполнено(Шапка.МаршрутныйЛист) Тогда
			ОбластьМакета=Макет.ПолучитьОбласть("МаршрутныйЛист");
			ОбластьМакета.Параметры.МаршрутныйЛист="№ "+Шапка.МаршрутныйЛист.Номер+" от "+Формат(Шапка.МаршрутныйЛист.Дата,"ДЛФ=DD");
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		//KAV-- Крапивин Андрей. 31.12.2014 9:58:02
		
		ЕстьСкидки = ТоварыПиво.Итог("Скидка") + ТоварыПиво.Итог("АвтоматическаяСкидка") <> 0;
		
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды = Истина;
			Колонка = "Артикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды = Истина;
			Колонка = "Код";
		Иначе
			ВыводитьКоды = Ложь;
		КонецЕсли;
		
		//dime ///////////////////////////////////////////////////////
		
		
		//НЕ ПИВО
		Если КоличествоСнеки > 0 Тогда
			//Str+ Заголовок
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");			
			
			ОбластьМакета.Параметры.ТекстЗаголовка = "НЕ ПИВО";
			//20120301 Лямкина Юлия
			ОбластьМакета.Параметры.Склад = СсылкаНаОбъект.Склад;
			//20120301 Лямкина Юлия
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
			ОбластьМест   = Макет.ПолучитьОбласть("ШапкаТаблицы|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			Если флВыводитьМест Тогда
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			ОбластьКолонкаТовар = Макет.Область("Товар");
			Если Не ВыводитьКоды Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				Макет.Область("КолонкаКодов").ШиринаКолонки;
			КонецЕсли;
			//Если НЕ ЕстьСкидки Тогда
			//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			//	Макет.Область("СуммаБезСкидки").ШиринаКолонки +
			//	Макет.Область("СуммаСкидки").ШиринаКолонки;
			//КонецЕсли;
			
			Если не флВыводитьМест Тогда
				ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
				ФормированиеПечатныхФорм.РасчетШириныОбластиМакета("Мест", Макет);
			КонецЕсли;
			
			
			ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
			ОбластьМест  = Макет.ПолучитьОбласть("Строка|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("Строка|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
			
			Сумма    = 0;
			СуммаНДС = 0;
			ВсегоСкидок    = 0;
			ВсегоБезСкидок = 0;
			КоэфКурса=Неопределено;
			СуммыВРублях=Ложь;
			КоэфКурса = ?( СуммыВРублях, Шапка.КурсВзаиморасчетов / Шапка.КратностьВзаиморасчетов, 1);
			Состояние("Сортировка НЕ ПИВА по иерархии");
			СортироватьПоРодителю(ТоварыСнеки);
			Для каждого ВыборкаСтрокТовары из ТоварыСнеки Цикл 
				
				Если Не ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
					Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				ОбластьНомера.Параметры.НомерСтроки = ТоварыСнеки.Индекс(ВыборкаСтрокТовары) + 1;
				ТабДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					Если Колонка = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
					КонецЕсли;
					// + Хам 2016_10_17
	        		ЗапросШк=Новый Запрос;
					ЗапросШк.Параметры.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
					ЗапросШк.Текст = "ВЫБРАТЬ
					                 |	ШК.Штрихкод КАК ШтрихКод,
					                 |	ШК.Владелец КАК Владелец,
					                 |	ШК.ТипШтрихкода,
					                 |	ШК.ПредставлениеШтрихкода
					                 |ИЗ
					                 |	РегистрСведений.Штрихкоды КАК ШК
					                 |ГДЕ
					                 |	ШК.Владелец = &Номенклатура";
					РезультатЗапроса=ЗапросШк.Выполнить().Выгрузить();
					Для Каждого Строка ИЗ РезультатЗапроса Цикл
						ОбластьКодов.Параметры.Артикул = Строка.ШтрихКод;
						Прервать;
					КонецЦикла;
					// - Хам	
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьТовар.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар)
				+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
				+ ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");		
				ТабДокумент.Присоединить(ОбластьТовар);
				
				Если флВыводитьМест Тогда
					ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
					ТабДокумент.Присоединить(ОбластьМест);
				КонецЕсли;
				
				СуммаРуб = Окр(ВыборкаСтрокТовары.Сумма * КоэфКурса, 2, 1);
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
				//ОбластьДанных.Параметры.Цена  = ?(ВыборкаСтрокТовары.Количество = 0, СуммаРуб, Окр( СуммаРуб / ВыборкаСтрокТовары.Количество, 2, 1));
				ОбластьДанных.Параметры.Цена  = Окр(ВыборкаСтрокТовары.Цена * КоэфКурса, 2, 1);
				
				ТабДокумент.Присоединить(ОбластьДанных);
				
				// Скидка может быть NULL
				ПроцентСкидки = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка),ВыборкаСтрокТовары.Скидка,0) 
				+ ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),ВыборкаСтрокТовары.АвтоматическаяСкидка,0);
				
				Скидка = Ценообразование.ПолучитьСуммуСкидки(СуммаРуб, ПроцентСкидки);
				
				Если ЕстьСкидки Тогда
					ОбластьСкидок.Параметры.Скидка         = Скидка;
					ОбластьСкидок.Параметры.СуммаБезСкидки = ?(СуммыВРублях, СуммаРуб, ВыборкаСтрокТовары.Сумма) + Скидка;
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				
				ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
				Если СуммыВРублях Тогда
					ОбластьСуммы.Параметры.Сумма = СуммаРуб;
				КонецЕсли;
				
				
				ТабДокумент.Присоединить(ОбластьСуммы);
				Если СуммыВРублях Тогда
					Сумма          = Сумма       + СуммаРуб;
					СуммаНДС       = СуммаНДС    + Окр( ВыборкаСтрокТовары.СуммаНДС * КоэфКурса, 2, 1);
				Иначе
					Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
					СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
				КонецЕсли;
				ВсегоСкидок    = ВсегоСкидок + Скидка;
				ВсегоБезСкидок = Сумма       + ВсегоСкидок;
				
			КонецЦикла;
			
			
			// Вывести Итого
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТовар|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТовар|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ИтогоТовар|Товар");
			ОбластьМест  = Макет.ПолучитьОбласть("ИтогоТовар|Мест");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТовар|КоличествоЦена");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоТовар|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТовар|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьТовар);
			Если флВыводитьМест Тогда
				ТабДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
				ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			// Вывести ИтогоНДС
			Если Шапка.УчитыватьНДС Тогда
				ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДСТовар|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДСТовар|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ИтогоНДСТовар|Товар");
				ОбластьМест  = Макет.ПолучитьОбласть("ИтогоНДСТовар|Мест");
				ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДСТовар|КоличествоЦена");
				ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДСТовар|Скидка");
				ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДСТовар|Сумма");
				
				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ТабДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьТовар);
				Если флВыводитьМест Тогда
					ТабДокумент.Присоединить(ОбластьМест);
				КонецЕсли;
				
				ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
				ТабДокумент.Присоединить(ОбластьДанных);
				Если ЕстьСкидки Тогда
					ТабДокумент.Присоединить(ОбластьСкидок);
				КонецЕсли;
				ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
				ТабДокумент.Присоединить(ОбластьСуммы);
			КонецЕсли;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописьюТовар");
			СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
			Если СуммыВРублях Тогда
				ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + КоличествоСнеки
				+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
				ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
			Иначе
				ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + КоличествоСнеки
				+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
				ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Вывести подписи
		Если СсылкаНаОбъект.Самовывоз Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиБезАкта");
		КонецЕсли;
		
		
		// Отпуск товара произвел
		Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.Дата);
			ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
			ОбластьМакета.Параметры.ОтветственныйПредставление = ФИООтпускПроизвел;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Возврат ТабДокумент;
КонецФункции // ПечатьСчетаЗаказаКорректировки()

// СЕРВИСНЫЕ ФУНКЦИИ ПРИ ФОРМИРОВАНИИ ПЕЧАТНЫХ ФОРМ

// Процедура считывает ФИО физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция ФИО(Ссылка)
	
	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	
	Фамилия  = ФИОСрез.Фамилия;
	Имя      = ФИОСрез.Имя;
	Отчество = ФИОСрез.Отчество;
	Возврат Фамилия+" "+Сред(Имя,1,1)+"."+Сред(Отчество,1,1)+".";
	
КонецФункции 


//КТ-2000-(095)789-3070/////////////////////////////////////////////////////////
// Функции и процедуры для использования внешними данными

// Внешняя функция печати
// КТ-2000: (095)789-3070
// Параметры
//  ИмяМакета  – Строка – имя формы печати
//
// Возвращаемое значение:
//   Булево   –Печать прошла успешно - Истина, иначе - Ложь
//
Функция Печать(ИмяМакета = "", ПараметрыПечати = Неопределено)	Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Если Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(СсылкаНаОбъект.Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат Ложь;
	//КонецЕсли;
	ИмяМакета = "Накладная";
	ТабДокумент     = ПечатьСчетаЗаказаКорректировки(СсылкаНаОбъект,ИмяМакета);
	
	//Определим параметры печати
	Если ПараметрыПечати <> Неопределено Тогда
		КоличествоЭкземпляров = 1;
		Если НЕ(ПараметрыПечати.Свойство("КоличествоЭкземпляров",КоличествоЭкземпляров)) Тогда
			КоличествоЭкземпляров = 1;			
		КонецЕсли;
		НаПринтер = Ложь;
		Если НЕ(ПараметрыПечати.Свойство("НаПринтер",НаПринтер)) Тогда
			НаПринтер = Ложь;			
		КонецЕсли;
	КонецЕсли;
	Если КоличествоЭкземпляров = Неопределено Тогда
		КоличествоЭкземпляров = 1;
	КонецЕсли;
	Если НаПринтер = Неопределено Тогда
		НаПринтер = Ложь;
	КонецЕсли;
	//---КТ-2000-(095)789-3070---Олег-27.06.05
	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ВыбОбъект));
	Возврат ТабДокумент;
	//---КТ-2000-(095)789-3070---Олег-27.06.05
	
КонецФункции // Печать()


// Возвращает информацию о внешней форме
// КТ-2000: (095)789-3070
// Возвращаемое значение:
//   Структура   – информация о форме
//
Функция ИнформацияОВнешнейФорме()	Экспорт
	
	ИнформацияОФорме = Новый Структура;
	
	ИнформацияОФорме.Вставить("ВидФормы", ВидФормы);
	ИнформацияОФорме.Вставить("НаименованиеФормы", НаименованиеФормы);
	ИнформацияОФорме.Вставить("РелизФормы", РелизФормы);
	ИнформацияОФорме.Вставить("ДатаИзмененияФормы", ДатаИзмененияФормы);
	ИнформацияОФорме.Вставить("КомментарийФормы", КомментарийФормы);
	
	Возврат ИнформацияОФорме;
	
КонецФункции // ИнформацияОВнешнейФорме()

Функция ПолучитьТаблицуГрупп(Спс)
	//Сообщить("ё");	
	ТзВозврат=Новый ТаблицаЗначений;
	ТзВозврат.Колонки.Добавить("Группа");
	ТзВозврат.Колонки.Добавить("Уровень");
	ТзВозврат.Колонки.Добавить("ДляСвертки");
	Запрос=Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Группа,
	|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&Спс)
	|
	|ИТОГИ ПО 
	|	Группа ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Спс",Спс);
	ТЗ=Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из ТЗ Цикл
		//		Сообщить(""+Стр.Группа);
		Попытка
			Если Стр.ЭтоГруппа Тогда
				СтрВ_ТзВозврат=ТзВозврат.Добавить();
				СтрВ_ТзВозврат.Группа=Стр.Группа.Ссылка;
				СтрВ_ТзВозврат.Уровень=Стр.Группа.Уровень();
				СтрВ_ТзВозврат.ДляСвертки=1;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	ТзВозврат.Свернуть("Группа,Уровень","ДляСвертки");
	ТзВозврат.Сортировать("Уровень,Группа");
	//Сообщить("ё2");	
	Возврат ТзВозврат;
КонецФункции

Процедура СортироватьПоРодителю(ТабличнаяЧастьИн) Экспорт;
	
	ТабличнаяЧасть = ТабличнаяЧастьИн.Скопировать();
	ТабличнаяЧасть.Колонки.Добавить("Родитель");
	Для Каждого Стр Из ТабличнаяЧасть Цикл
		Стр.Родитель=Стр.Номенклатура.Родитель.Ссылка;
	КонецЦикла;
	ТабличнаяЧастьНовая = ТабличнаяЧастьИн.Скопировать();
	ТабличнаяЧастьНовая.Очистить();
	Состояние("Вычисление групп номенклатуры");
	
	ТзДляСпискаНомен=Новый ТаблицаЗначений;
	ТзДляСпискаНомен=ТабличнаяЧасть.Скопировать();
	ТзДляСпискаНомен.Свернуть("Номенклатура","Количество");
	СпсНоменДляГрупп=Новый СписокЗначений;
	Для Каждого Стр Из ТзДляСпискаНомен Цикл
		СпсНоменДляГрупп.Добавить(Стр.Номенклатура);
	КонецЦикла;
	ТзГрупп=ПолучитьТаблицуГрупп(СпсНоменДляГрупп);	
	//Создадим массив групп 0 уровня
	СтруктураОтбора=Новый Структура("Уровень",0);
	МассивГруппУровня0=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//Создадим массив групп 1 уровня
	СтруктураОтбора=Новый Структура("Уровень",1);
	МассивГруппУровня1=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//Создадим массив групп 2 уровня
	СтруктураОтбора=Новый Структура("Уровень",2);
	МассивГруппУровня2=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//Создадим массив групп 3 уровня
	СтруктураОтбора=Новый Структура("Уровень",3);
	МассивГруппУровня3=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//Создадим массив групп 3 уровня
	СтруктураОтбора=Новый Структура("Уровень",4);
	МассивГруппУровня4=ТзГрупп.НайтиСтроки(СтруктураОтбора);
	
	//		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Строка,,СписокИсключаемыхСвойств);
	Ном=0;
	Для Каждого Стр0 Из МассивГруппУровня0 Цикл
		//Пробуем вывести элементы которые могут быть внутри этой группы
		СтруктураОтбора=Новый Структура("Родитель",Стр0.Группа);
		МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрНомен Из МассивСтрок Цикл
			Ном=Ном+1;
			//Сообщить("1"+ СтрНомен.Номенклатура);
			НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
		КонецЦикла;
		Для Каждого Стр1 Из МассивГруппУровня1 Цикл
			Если Стр1.Группа.Родитель.Ссылка<>Стр0.Группа.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			//Пробуем вывести элементы которые могут быть внутри этой группы
			СтруктураОтбора=Новый Структура("Родитель",Стр1.Группа);
			МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрНомен Из МассивСтрок Цикл
				Ном=Ном+1;
				//Сообщить("2"+ СтрНомен.Номенклатура);
				НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
			КонецЦикла;
			Для Каждого Стр2 Из МассивГруппУровня2 Цикл
				Если Стр2.Группа.Родитель.Ссылка<>Стр1.Группа.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				//Пробуем вывести элементы которые могут быть внутри этой группы
				СтруктураОтбора=Новый Структура("Родитель",Стр2.Группа);
				МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрНомен Из МассивСтрок Цикл
					Ном=Ном+1;
					//Сообщить("4"+ СтрНомен.Номенклатура);
					НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
				КонецЦикла;
				Для Каждого Стр3 Из МассивГруппУровня3 Цикл
					Если Стр3.Группа.Родитель.Ссылка<>Стр2.Группа.Ссылка Тогда
						Продолжить;
					КонецЕсли;
					//Пробуем вывести элементы которые могут быть внутри этой группы
					СтруктураОтбора=Новый Структура("Родитель",Стр3.Группа);
					МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
					Для Каждого СтрНомен Из МассивСтрок Цикл
						Ном=Ном+1;
						//Сообщить("5"+ СтрНомен.Номенклатура);
						НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
					КонецЦикла;
					Для Каждого Стр4 Из МассивГруппУровня4 Цикл
						Если Стр4.Группа.Родитель.Ссылка<>Стр3.Группа.Ссылка Тогда
							Продолжить;
						КонецЕсли;
						//Пробуем вывести элементы которые могут быть внутри этой группы
						СтруктураОтбора=Новый Структура("Родитель",Стр4.Группа);
						МассивСтрок=ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
						Для Каждого СтрНомен Из МассивСтрок Цикл
							Ном=Ном+1;
							//Сообщить("6"+ СтрНомен.Номенклатура);
							НоваяСтрока = ТабличнаяЧастьНовая.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНомен,,);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	
	ТабличнаяЧастьИн=ТабличнаяЧастьНовая.Скопировать();
	
КонецПроцедуры 

//Информация о форме
ВидФормы 			= Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
НаименованиеФормы	= "Накладная Испр";
РелизФормы			= "1.1";
ДатаИзмененияФормы	= '20080529';
КомментарийФормы	= "Накладная";
НазваниеКнопки		= "Накладная";
НазваниеМеню		= "Накладная";
//Попытка
//КартинкаКнопки 		= Метаданные.ОбщиеКартинки.СправкиАиБ;
//Исключение
КартинкаКнопки		= Неопределено;
//КонецПопытки;

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");
