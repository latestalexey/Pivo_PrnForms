
Перем мСтруктураНачальныхНастроек;
Перем мОснованиеСФ, мЕстьСФ, мДоверенность, мЕстьДоверенность;

Перем ДеревоМакетовПечатиРН;
Перем ДеревоМакетовПечатиСФ;
Перем ДеревоМакетовПечатиТТН;
Перем ДеревоМакетовПечатиДоворенности;
Перем ДеревоМакетовПечатиРС;
Перем ДеревоМакетовПечатиСправки;
Перем ДеревоМакетовПечатиСправкиВнутр;
Перем ДеревоМакетовПечатиСертификатов;
Перем ДеревоМакетовПечатиПроизвольнаяФорма;

Функция НайтиПодчиненныйДокументДоверенность(Документ)
	Доверенность = Неопределено;
	ЗапросДоверенности = Новый Запрос;
	ЗапросДоверенности.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	Доверенность.Ссылка КАК Ссылка
	                           |ИЗ
	                           |	Документ.Доверенность КАК Доверенность
	                           |ГДЕ
	                           |	(Доверенность.ДокументОснование = &ТекущийДокумент
	                           |			ИЛИ Доверенность.ДатаДействия >= &Дата
	                           |				И НЕ Доверенность.ПометкаУдаления
	                           |				И Доверенность.НоваяДоверенность
	                           |				И Доверенность.Организация = &Организация
	                           |				И Доверенность.Контрагент = &Контрагент)";
	ЗапросДоверенности.Параметры.Вставить("ТекущийДокумент", Документ);
							   
	ЗапросДоверенности.Параметры.Вставить("Дата",				Документ.Дата);
	ЗапросДоверенности.Параметры.Вставить("Организация",		Документ.Организация);
	ЗапросДоверенности.Параметры.Вставить("Контрагент",			Документ.Контрагент);
	РезультатЗапроса = ЗапросДоверенности.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Доверенность = РезультатЗапроса.Ссылка;
	КонецЦикла;
	Возврат Доверенность;
КонецФункции

// Функция преобразует дерево в список
//
// Параметры
//
// Возвращаемое значение:
//
Функция ПреобразоватьДеревоВСписок(ИсходноеДерево)
	
	СЗ = Новый СписокЗначений;
	
	Для Каждого СтрокаДерева Из ИсходноеДерево.Строки Цикл
		СЗ.Добавить(СтрокаДерева.Имя, СтрокаДерева.Текст);
		СЗ.СортироватьПоПредставлению();
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции // ПреобразоватьДеревоВСписок()

// Функция производит поиск значения в списке по Представлению
//
Функция НайтиПоПредставлению(Список, Представление)
	
	Для каждого Значение Из Список Цикл
		Если Значение.Представление = Представление Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверкаРеестраНаПустоту(Реализация)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Реализация.Ссылка);
	Запрос.УстановитьПараметр("Дата", НачалоДня(Реализация.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номер КАК Номер,
	|	ВложенныйЗапрос.ДатаВыдачи,
	|	ВложенныйЗапрос.ДатаОкончания,
	|	ВложенныйЗапрос.СрокГодности,
	|	ВложенныйЗапрос.Изготовитель КАК Изготовитель,
	|	ВложенныйЗапрос.ОрганСертификации КАК ОрганСертификации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Номенклатура.Ссылка КАК Номенклатура,
	|			СертификатыНомера.Номер КАК Номер,
	|			СертификатыНомера.ДатаВыдачи КАК ДатаВыдачи,
	|			СертификатыНомера.ДатаОкончания КАК ДатаОкончания,
	|			СертификатыНомера.СрокГодности КАК СрокГодности,
	|			СертификатыНомера.Ссылка.Изготовитель КАК Изготовитель,
	|			СертификатыНомера.ОрганСертификации КАК ОрганСертификации
	|		ИЗ
	|			Справочник.Номенклатура КАК Номенклатура
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сертификаты.Номера КАК СертификатыНомера
	|				ПО Номенклатура.Сертификат = СертификатыНомера.Ссылка
	|		ГДЕ
	|			СертификатыНомера.ДатаВыдачи <= &Дата
	|			И СертификатыНомера.ДатаОкончания >= &Дата) КАК ВложенныйЗапрос
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Изготовитель,
	|	ВложенныйЗапрос.ОрганСертификации,
	|	ВложенныйЗапрос.СрокГодности,
	|	ВложенныйЗапрос.Номер,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	ВложенныйЗапрос.ДатаВыдачи,
	|	ВложенныйЗапрос.ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|ИТОГИ ПО
	|	Номенклатура";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ПроверкаСправкиНаПустоту(Реализация)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Реализация.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = КатегорииОбъектов.Объект
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
	|	И КатегорииОбъектов.Категория.Наименование = ""Содержит алкоголь""";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ПроверкаСправкиВнутрНаПустоту(Реализация)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Реализация.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугВнутренняяПродажа.ДокументРеализации КАК Док
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВнутренняяПродажа КАК РеализацияТоваровУслугВнутренняяПродажа
	|ГДЕ
	|	РеализацияТоваровУслугВнутренняяПродажа.Ссылка = &ТекущийДокумент";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Процедура заполняет настройки, с которыми была закрыта форма при
// предыдущем запуске.
//
// Параметры:
//  ВосстанавливатьЗначения - булево, флаг попытки восстановить сохраненные значения.
//
Процедура ЗаполнитьНачальныеНастройки(ВосстанавливатьЗначения = Истина)
	
	Перем ВосстановленноеЗначение;
	
	ПечататьРеализацию = Истина;
	
	УстановитьДоступность();
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки = ВосстановитьЗначение("МаршрутныйЛист.ФормаФормированияПакетаДокументов.Настройки");
		Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
			СохраненныеНастройки = Новый Структура;
		КонецЕсли;
	КонецЕсли;
	
	//ТОРГ 12
	ДеревоМакетовПечатиРН = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РеализацияТоваровУслуг.СоздатьДокумент().Ссылка, Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетРеализации.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиРН);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетРеализации", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетРеализации.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетРеализации.СписокВыбора.Получить(0), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетРеализации.СписокВыбора.Получить(0);
	КонецЕсли;
	МакетРеализации = ТекущийМакет.Значение;
	
	//счет-фактура
	ДеревоМакетовПечатиСФ = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.СчетФактураВыданный.СоздатьДокумент().Ссылка, Документы.СчетФактураВыданный.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетСФ.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиСФ);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетСФ", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетСФ.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетСФ.СписокВыбора.Получить(0), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетСФ.СписокВыбора.Получить(0);
	КонецЕсли;
	МакетСФ = ТекущийМакет.Значение;
	
	//ТТН
	ДеревоМакетовПечатиТТН = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РеализацияТоваровУслуг.СоздатьДокумент().Ссылка, Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетТТН.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиТТН);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетТТН", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетТТН.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетТТН.СписокВыбора.Получить(0), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетТТН.СписокВыбора.Получить(0);
	КонецЕсли;
	МакетТТН = ТекущийМакет.Значение;
	
	//Доверенность
	ДеревоМакетовПечатиДоворенности = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.Доверенность.СоздатьДокумент().Ссылка, Документы.Доверенность.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетДоверенность.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиДоворенности);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетДоверенность", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетДоверенность.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетДоверенность.СписокВыбора.Получить(0), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетДоверенность.СписокВыбора.Получить(0);
	КонецЕсли;
	МакетДоверенность = ТекущийМакет.Значение;
	
	//реестр сертификатов
	ДеревоМакетовПечатиРС = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РеализацияТоваровУслуг.СоздатьДокумент().Ссылка, Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетРеестрСертификатов.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиРС);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетРеестрСертификатов", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетРеестрСертификатов.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетРеестрСертификатов.СписокВыбора.Получить(2), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетРеестрСертификатов.СписокВыбора.Получить(2);
	КонецЕсли;
	МакетРеестрСертификатов = ТекущийМакет.Значение;
	
	//справка к ТТН
	ДеревоМакетовПечатиСправки = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РеализацияТоваровУслуг.СоздатьДокумент().Ссылка, Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетСправкаТТН.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиСправки);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетСправкаТТН", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетСправкаТТН.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетСправкаТТН.СписокВыбора.Получить(2), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетСправкаТТН.СписокВыбора.Получить(2);
	КонецЕсли;
	МакетСправкаТТН = ТекущийМакет.Значение;
	
	//справка к ТТН внутр
	ДеревоМакетовПечатиСправкиВнутр = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РеализацияТоваровУслуг.СоздатьДокумент().Ссылка, Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетСправкаТТНВнутр.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиСправкиВнутр);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетСправкаТТНВнутр", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетСправкаТТНВнутр.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетСправкаТТНВнутр.СписокВыбора.Получить(2), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетСправкаТТНВнутр.СписокВыбора.Получить(2);
	КонецЕсли;
	МакетСправкаТТНВнутр = ТекущийМакет.Значение;
	
	//печать сертификатов
	ДеревоМакетовПечатиСертификатов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РеализацияТоваровУслуг.СоздатьДокумент().Ссылка, Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетПечатиСертификатов.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиСертификатов);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетПечатиСертификатов", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетПечатиСертификатов.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетПечатиСертификатов.СписокВыбора.Получить(2), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетПечатиСертификатов.СписокВыбора.Получить(2);
	КонецЕсли;
	МакетПечатиСертификатов = ТекущийМакет.Значение;
	
	//печать произвольной формы
	ДеревоМакетовПечатиПроизвольнаяФорма = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РеализацияТоваровУслуг.СоздатьДокумент().Ссылка, Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетПроизвольнаяФорма.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиПроизвольнаяФорма);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетПроизвольнаяФорма", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетПроизвольнаяФорма.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетПроизвольнаяФорма.СписокВыбора.Получить(2), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетПроизвольнаяФорма.СписокВыбора.Получить(2);
	КонецЕсли;
	МакетПроизвольнаяФорма = ТекущийМакет.Значение;
	
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	Если ВосстанавливатьЗначения Тогда
		ВосстановленноеЗначение = ВосстановитьЗначение("ПакетыДокументов");
		Если ТипЗнч(ВосстановленноеЗначение)=Тип("ТаблицаЗначений") Тогда
			ПакетыДокументов = ВосстановленноеЗначение;
		КонецЕсли;
	КонецЕсли;
//ZAM--- 07.06.2013
	//список принтеров
	ЗаполнитьСписокПринтеров();
	
	Для Каждого ЭлементСтруктуры Из мСтруктураНачальныхНастроек Цикл
		КлючЭлемента = ЭлементСтруктуры.Ключ;
		
		Если ВосстанавливатьЗначения Тогда
			СохраненныеНастройки.Свойство(КлючЭлемента, ВосстановленноеЗначение);
			
			ВосстановленноеЗначение = ?(ВосстановленноеЗначение = Неопределено, ЭлементСтруктуры.Значение, ВосстановленноеЗначение);
		Иначе
			ВосстановленноеЗначение = ЭлементСтруктуры.Значение;
		КонецЕсли;
		ЭтаФорма[КлючЭлемента] = ВосстановленноеЗначение;
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура устанавливает доступность эдементов формы
//
Процедура УстановитьДоступность() Экспорт
	
	ЭлементыФормы.МакетРеализации.Доступность                   = ПечататьРеализацию;
	ЭлементыФормы.КоличествоЭкземпляровРеализации.Доступность   = ПечататьРеализацию;
	
	ЭлементыФормы.МакетСФ.Доступность                   		= ПечататьСФ;
	ЭлементыФормы.КоличествоЭкземпляровСчетаФактуры.Доступность = ПечататьСФ;
	
	ЭлементыФормы.МакетТТН.Доступность                   		= ПечататьТТН;
	ЭлементыФормы.КоличествоЭкземпляровТТН.Доступность 			= ПечататьТТН;
	
	ЭлементыФормы.МакетДоверенность.Доступность                 = ПечататьДоверенность;
	ЭлементыФормы.КоличествоЭкземпляровДоверенность.Доступность = ПечататьДоверенность;
	
	ЭлементыФормы.МакетРеестрСертификатов.Доступность           = ПечататьРеестр;
	ЭлементыФормы.КоличествоЭкземпляровРеестр.Доступность 		= ПечататьРеестр;
	
	ЭлементыФормы.МакетСправкаТТН.Доступность           		= ПечататьСправку;
	ЭлементыФормы.КоличествоЭкземпляровСправка.Доступность 		= ПечататьСправку;
	
	ЭлементыФормы.МакетСправкаТТНВнутр.Доступность           	= ПечататьСправкуВнутр;
	ЭлементыФормы.КоличествоЭкземпляровСправкаВнутр.Доступность = ПечататьСправкуВнутр;
	
	ЭлементыФормы.МакетПечатиСертификатов.Доступность           = ПечататьСертификаты;
	ЭлементыФормы.КоличествоЭкземпляровСертификаты.Доступность 	= ПечататьСертификаты;
	
КонецПроцедуры // УстановитьДоступность()

Функция ПечатьТТН(Реализация)

	ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");

	ОбработкаПечати.Документ       = Реализация.Ссылка;
	//заполнить водителя из свойства реализации Экспедитор
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Основание
	|	И ЗначенияСвойствОбъектов.Свойство.Наименование = ""Экспедитор""";
	
	Запрос.УстановитьПараметр("Основание", Реализация.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ОбработкаПечати.Водитель = Выборка.Значение;
		ОбработкаПечати.ЗаполнитьДанныеПоВодителю(Выборка.Значение);
	КонецЕсли;
	ОбработкаПечати.ПунктПогрузки = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Реализация.Организация,Реализация.Дата), "ФактическийАдрес");
	//ОбработкаПечати.Перевозчик = Контрагент.НаименованиеПолное;
	//ОбработкаПечати.Заказчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Контрагент,Дата), "ПолноеНаименование,ФактическийАдрес");
	ОбработкаПечати.ПунктРазгрузки = Реализация.АдресДоставки;

	//ОбработкаПечати.Открыть();

	Возврат ОбработкаПечати.ПечатьТТН();

КонецФункции // ПечатьТТН()

// Функция формирует требуемые документы и выполняет требуемые действия в зависимости от настроек.
//
// Возвращаемое значение:
//  Булево - Ложь, если не удалось провести документ РН.
//
Процедура СформироватьДокументы(ТекПакетДокументов, Реализация)
	
	Перем ОбъектСФ;
	Перем ОбъектДоверенность;
	
	ЗадержкаСек = 0;
	
	// Счет-фактура
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек);
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьСФ", "ИмяФлагаФормы");
	Если СтрокаПакета<>Неопределено Тогда
//ZAM--- 07.06.2013
		мОснованиеСФ = УчетНДС.НайтиПодчиненныйДокумент(Реализация.Ссылка, "СчетФактураВыданный");
		мЕстьСФ      = ЗначениеЗаполнено(мОснованиеСФ);
		Если мЕстьСФ Тогда
			ОбъектСФ = мОснованиеСФ.ПолучитьОбъект();
		Иначе 
			ОбъектСФ =  Неопределено;
		КонецЕсли;
	КонецЕсли;

	// Доверенность
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек);
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьДоверенность", "ИмяФлагаФормы");
	Если СтрокаПакета<>Неопределено Тогда
//ZAM--- 07.06.2013
		//Сообщить("Начата печать 'ПечататьДоверенность' в "+ТекущаяДата());
		мДоверенность = НайтиПодчиненныйДокументДоверенность(Реализация.Ссылка);
		мЕстьДоверенность      = ЗначениеЗаполнено(мДоверенность);
		Если мЕстьДоверенность Тогда
			ОбъектДоверенность = мДоверенность.ПолучитьОбъект();
		Иначе
			ОбъектДоверенность = Неопределено;
		КонецЕсли;
		//Сообщить("Печать завершена в "+ТекущаяДата());
	КонецЕсли;
	
	// Печать документов.
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек); 
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьРеализацию", "ИмяФлагаФормы");
	Если Реализация <> Неопределено И СтрокаПакета<>Неопределено И Реализация.Проведен Тогда
//ZAM--- 07.06.2013
		Если Реализация.Услуги.Количество()=0 Тогда
			ВыбМакетРеализации = МакетРеализации;
		Иначе
			ВыбМакетРеализации = "АктРуб";
		КонецЕсли;
		СтрМакета = ДеревоМакетовПечатиРН.Строки.Найти(ВыбМакетРеализации, "Имя");
		//Сообщить("Начата печать 'ПечататьРеализацию' в "+ТекущаяДата());
		Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка);
			ТабДокумент.ИмяПринтера = Принтер;
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
		Иначе
			Реализация.Печать(ВыбМакетРеализации, СтрокаПакета.Количество, ПечататьНаПринтер);
		КонецЕсли;
		//Сообщить("Печать завершена в "+ТекущаяДата());
	КонецЕсли;
	
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек);
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьСФ", "ИмяФлагаФормы");
	Если ОбъектСФ <> Неопределено И СтрокаПакета<>Неопределено И ОбъектСФ.Проведен Тогда
//ZAM--- 07.06.2013
	//Сообщить("Начата печать 'ПечататьСФ' в "+ТекущаяДата());
	Попытка
		СтрМакета = ДеревоМакетовПечатиСФ.Строки.Найти(МакетСФ, "Имя");
		Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(ОбъектСФ.Ссылка, СтрМакета.Расшифровка);
			ТабДокумент.ИмяПринтера = Принтер;
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ОбъектСФ, ОбъектСФ.Метаданные().Представление()), ОбъектСФ.Ссылка);
		Иначе
			ОбъектСФ.Печать(МакетСФ, СтрокаПакета.Количество, ПечататьНаПринтер);
		КонецЕсли;
	Исключение
		Сообщить("При печати СЧФ возникла ошибка. СЧФ для документа:" + ОбъектСФ + " Не напечатана.");
	КонецПопытки;	
	//Сообщить("Печать завершена в "+ТекущаяДата());
	КонецЕсли;
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек); 
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьТТН", "ИмяФлагаФормы");
	Если Реализация <> Неопределено И СтрокаПакета<>Неопределено И Реализация.Проведен Тогда
//ZAM--- 07.06.2013
		СтрМакета = ДеревоМакетовПечатиТТН.Строки.Найти(МакетТТН, "Имя");
		//Сообщить("Начата печать 'ПечататьТТН' в "+ТекущаяДата());
		Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка);
			ТабДокумент.ИмяПринтера = Принтер;
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
		Иначе
			//Реализация.Печать(МакетТТН, КоличествоЭкземпляровТТН, ПечататьНаПринтер);
			ТабДокумент = ПечатьТТН(Реализация);
			ТабДокумент.ИмяПринтера = Принтер;
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
		КонецЕсли;
		//Сообщить("Печать завершена в "+ТекущаяДата());
	КонецЕсли;
	
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек); 
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьРеестр", "ИмяФлагаФормы");
	Если Реализация <> Неопределено И СтрокаПакета<>Неопределено И Реализация.Проведен Тогда
//ZAM--- 07.06.2013
		//проверим
		ПустойРеестр = ПроверкаРеестраНаПустоту(Реализация);
		Если НЕ ПустойРеестр Тогда 
			//печатаем
			СтрМакета = ДеревоМакетовПечатиРС.Строки.Найти(МакетРеестрСертификатов, "Имя");
			//Сообщить("Начата печать 'ПечататьРеестр' в "+ТекущаяДата());
			Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
				ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка);
				ТабДокумент.ИмяПринтера = Принтер;
				УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
			Иначе
				Реализация.Печать(МакетРеестрСертификатов, СтрокаПакета.Количество, ПечататьНаПринтер);
			КонецЕсли;
			//Сообщить("Печать завершена в "+ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек);
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьСправку", "ИмяФлагаФормы");
	Если Реализация <> Неопределено И СтрокаПакета<>Неопределено И Реализация.Проведен Тогда
//ZAM--- 07.06.2013
		//проверим
		ПустаяСправка = ПроверкаСправкиНаПустоту(Реализация);
		Если НЕ ПустаяСправка Тогда 
			//печатаем
			СтрМакета = ДеревоМакетовПечатиСправки.Строки.Найти(МакетСправкаТТН, "Имя");
			//Сообщить("Начата печать 'ПечататьСправку' в "+ТекущаяДата());
			Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
				ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка);
				ТабДокумент.ИмяПринтера = Принтер;
				УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
			Иначе
				Реализация.Печать(МакетСправкаТТН, СтрокаПакета.Количество, ПечататьНаПринтер);
			КонецЕсли;
			//Сообщить("Печать завершена в "+ТекущаяДата());
		КонецЕсли;
	КонецЕсли;

//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек); 
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьСправкуВнутр", "ИмяФлагаФормы");
	Если Реализация <> Неопределено И СтрокаПакета<>Неопределено И Реализация.Проведен Тогда
//ZAM--- 07.06.2013
		//проверим
		ПустаяСправка = ПроверкаСправкиВнутрНаПустоту(Реализация);
		Если НЕ ПустаяСправка Тогда 
			//печатаем
			СтрМакета = ДеревоМакетовПечатиСправкиВнутр.Строки.Найти(МакетСправкаТТНВнутр, "Имя");
			//Сообщить("Начата печать 'ПечататьСправкуВнутр' в "+ТекущаяДата());
			Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
				ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка);
				Если ТабДокумент<>Неопределено Тогда
					ТабДокумент.ИмяПринтера = Принтер;
					УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
				КонецЕсли;
			Иначе
				Реализация.Печать(МакетСправкаТТНВнутр, СтрокаПакета.Количество, ПечататьНаПринтер);
			КонецЕсли;
			//Сообщить("Печать завершена в "+ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек); 
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьСертификаты", "ИмяФлагаФормы");
	Если Реализация <> Неопределено И СтрокаПакета<>Неопределено И Реализация.Проведен Тогда
//ZAM--- 07.06.2013
		Если Реализация.ОтражатьВБухгалтерскомУчете Тогда//11.05.2013 сертификаты печатать только для безнала
			СтрМакета = ДеревоМакетовПечатиСертификатов.Строки.Найти(МакетПечатиСертификатов, "Имя");
			//Сообщить("Начата печать 'ПечататьСертификаты' в "+ТекущаяДата());
			Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
				СтруктураВнешнихПараметров = Новый Структура;
				СтруктураВнешнихПараметров.Вставить("ПечататьНаПринтер", ПечататьНаПринтер);
				СтруктураВнешнихПараметров.Вставить("Принтер", Принтер);
				СтруктураВнешнихПараметров.Вставить("КоличествоЭкземпляров", СтрокаПакета.Количество);
				ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка, СтруктураВнешнихПараметров);
				//ТабДокумент.ИмяПринтера = Принтер;
				//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляровСертификаты, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
			Иначе
				Реализация.Печать(МакетПечатиСертификатов, СтрокаПакета.Количество, ПечататьНаПринтер);
			КонецЕсли;
			//Сообщить("Печать завершена в "+ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек);
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьПроизвольнаяФорма", "ИмяФлагаФормы");
	Если Реализация <> Неопределено И СтрокаПакета<>Неопределено И Реализация.Проведен Тогда
//ZAM--- 07.06.2013
		СтрМакета = ДеревоМакетовПечатиПроизвольнаяФорма.Строки.Найти(МакетПроизвольнаяФорма, "Имя");
		//Сообщить("Начата печать 'ПечататьПроизвольнаяФорма' в "+ТекущаяДата());
		Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка);
			ТабДокумент.ИмяПринтера = Принтер;
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
		Иначе
			Реализация.Печать(МакетПроизвольнаяФорма, СтрокаПакета.Количество, ПечататьНаПринтер);
		КонецЕсли;
		//Сообщить("Печать завершена в "+ТекущаяДата());
	КонецЕсли;
	
	
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	//Задержка(ЗадержкаСек); 
	СтрокаПакета = ТекПакетДокументов.Найти("ПечататьДоверенность", "ИмяФлагаФормы");
	Если ОбъектДоверенность <> Неопределено И СтрокаПакета<>Неопределено Тогда
//ZAM--- 07.06.2013
		СтрМакета = ДеревоМакетовПечатиДоворенности.Строки.Найти(МакетДоверенность, "Имя");
		//Сообщить("Начата печать 'ПечататьДоверенность' в "+ТекущаяДата());
		Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(ОбъектДоверенность.Ссылка, СтрМакета.Расшифровка);
			ТабДокумент.ИмяПринтера = Принтер;
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, СтрокаПакета.Количество, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ОбъектДоверенность, ОбъектДоверенность.Метаданные().Представление()), ОбъектДоверенность.Ссылка);
		Иначе
			ОбъектДоверенность.Печать(МакетДоверенность, СтрокаПакета.Количество, ПечататьНаПринтер);
		КонецЕсли;
		//Сообщить("Печать завершена в "+ТекущаяДата());
	КонецЕсли;

КонецПроцедуры // СформироватьДокументы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Значения по умолчанию".
//
Процедура ДействияФормыЗначенияПоУмолчанию(Кнопка)
	
	ЗаполнитьНачальныеНастройки(Ложь);
	УстановитьДоступность();
	
КонецПроцедуры // ДействияФормыЗначенияПоУмолчанию()

// Процедура вызывается при нажатии кнопки "Сформировать документы".
//
Процедура ОсновныеДействияФормыСформироватьДокументы(Кнопка)
//ZAM+++ 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	ОсновнойПакет = Новый ТаблицаЗначений;
	ОсновнойПакет.Колонки.Добавить("ИмяФлагаФормы");
	ОсновнойПакет.Колонки.Добавить("Количество");
	Если ПечататьРеализацию Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "ПечататьРеализацию";
		НовСтр.Количество    = КоличествоЭкземпляровРеализации;
	КонецЕсли;
	Если ПечататьСФ Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "КоличествоЭкземпляровСчетаФактуры";
		НовСтр.Количество    = КоличествоЭкземпляровСчетаФактуры;
	КонецЕсли;
	Если ПечататьТТН Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "КоличествоЭкземпляровТТН";
		НовСтр.Количество    = КоличествоЭкземпляровТТН;
	КонецЕсли;
	Если ПечататьРеестр Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "ПечататьРеестр";
		НовСтр.Количество    = КоличествоЭкземпляровРеестр;
	КонецЕсли;
	Если ПечататьСправку Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "ПечататьСправку";
		НовСтр.Количество    = КоличествоЭкземпляровСправка;
	КонецЕсли;
	Если ПечататьСправкуВнутр Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "ПечататьСправкуВнут";
		НовСтр.Количество    = КоличествоЭкземпляровСправкаВнутр;
	КонецЕсли;
	Если ПечататьСертификаты Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "ПечататьСертификаты";
		НовСтр.Количество    = КоличествоЭкземпляровСертификаты;
	КонецЕсли;
	Если ПечататьПроизвольнаяФорма Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "ПечататьПроизвольнаяФорма";
		НовСтр.Количество    = КоличествоЭкземпляровПроизвольнаяФорма;
	КонецЕсли;
	Если ПечататьДоверенность Тогда
		НовСтр = ОсновнойПакет.Добавить();
		НовСтр.ИмяФлагаФормы = "ПечататьДоверенность";
		НовСтр.Количество    = КоличествоЭкземпляровДоверенность;
	КонецЕсли;

	Для Каждого Строка из ТаблицаРеализаций Цикл
		Если НЕ Строка.Пометка Тогда 
			Продолжить;
		КонецЕсли;
		Реализация = Строка.Реализация.ПолучитьОбъект();
		Если Не Реализация.Проведен ИЛИ Реализация.Модифицированность() Тогда
			Сообщить("Не удалось сформировать документы по " + Реализация);
			Продолжить;
		КонецЕсли;
		Для Каждого ТекПакет Из ПакетыДокументов Цикл
			СформироватьДокументы(ТекПакет.ПакетДокументов.СоставПакета.Выгрузить(), Реализация);
		КонецЦикла;
		СформироватьДокументы(ОсновнойПакет, Реализация);//по основному пакету печатаем сзади
	КонецЦикла;
//ZAM--- 07.06.2013	
КонецПроцедуры // ОсновныеДействияФормыСформироватьДокументы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Заполнить начальные настройки
	ЗаполнитьНачальныеНастройки();
	УстановитьДоступность();
		
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()
	
	// Сохранить настройки.
	СтруктураСохраненияНастроек = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураНачальныхНастроек Цикл
		КлючЭлемента = ЭлементСтруктуры.Ключ;
		СтруктураСохраненияНастроек.Вставить(КлючЭлемента, ЭтаФорма[КлючЭлемента]);
	КонецЦикла;
	
	СтрМакета = ДеревоМакетовПечатиРН.Строки.Найти(МакетРеализации, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетРеализации", СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиСФ.Строки.Найти(МакетСФ, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетСФ"        , СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиТТН.Строки.Найти(МакетТТН, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетТТН"       , СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиДоворенности.Строки.Найти(МакетДоверенность, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетДоверенность", СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиРС.Строки.Найти(МакетРеестрСертификатов, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетРеестрСертификатов", СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиСправки.Строки.Найти(МакетСправкаТТН, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетСправкаТТН", СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиСправкиВнутр.Строки.Найти(МакетСправкаТТНВнутр, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетСправкаТТНВнутр", СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиСертификатов.Строки.Найти(МакетПечатиСертификатов, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетПечатиСертификатов", СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиПроизвольнаяФорма.Строки.Найти(МакетПроизвольнаяФорма, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетПроизвольнаяФорма", СтрМакета.Текст);
	КонецЕсли;
	
	СтруктураСохраненияНастроек.Вставить("Принтер", Принтер);
	
	СохранитьЗначение("МаршрутныйЛист.ФормаФормированияПакетаДокументов.Настройки", СтруктураСохраненияНастроек);
	
	мФормаРеализации = Неопределено;

	СохранитьЗначение("ПакетыДокументов", ПакетыДокументов);//ZAM 07.06.2013 #1050147 маршрутные листы. Добавить печать пакетов документов попакетно
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

Процедура ПечататьПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

Процедура КоманднаяПанель1УстановитьФлажки(Кнопка)
	Для каждого Строка Из ТаблицаРеализаций Цикл
		Строка.Пометка = Истина;
	КонецЦикла; 
КонецПроцедуры

Процедура КоманднаяПанель1СнятьФлажки(Кнопка)
	Для каждого Строка Из ТаблицаРеализаций Цикл
		Строка.Пометка = Ложь;
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаполнитьСписокПринтеров()
	Локатор = Новый COMОбъект("WbemScripting.SWbemLocator");
	СлужбаWMI = Локатор.ConnectServer();
	ПринтерыВСистеме = СлужбаWMI.InstancesOf("Win32_Printer");
	СписокПринтеров = Новый СписокЗначений;
	Для Каждого Строка Из ПринтерыВСистеме Цикл
		СписокПринтеров.Добавить(Строка.Name);
		Если Строка.Default Тогда
			ПринтерПоУмолчанию = СписокПринтеров[СписокПринтеров.Количество()-1].Значение;
			мСтруктураНачальныхНастроек.Вставить("Принтер", ПринтерПоУмолчанию);
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.Принтер.СписокВыбора = СписокПринтеров;
	Принтер = ПринтерПоУмолчанию;
КонецПроцедуры

Процедура Задержка(мсек)
 
  Выход=ТекущаяДата()+1;
  Пока ТекущаяДата()<Выход Цикл
  КонецЦикла;
 
КонецПроцедуры
мСтруктураНачальныхНастроек = Новый Структура;

мСтруктураНачальныхНастроек.Вставить("ПечататьРеализацию"               , Истина);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровРеализации"  , 2);

мСтруктураНачальныхНастроек.Вставить("ПечататьСФ"                       , Истина);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровСчетаФактуры", 2);

мСтруктураНачальныхНастроек.Вставить("ПечататьТТН"                      , Истина);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровТТН"			, 2);

мСтруктураНачальныхНастроек.Вставить("ПечататьДоверенность"             , Ложь);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровДоверенность", 2);

мСтруктураНачальныхНастроек.Вставить("ПечататьРеестр"             		, Ложь);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровРеестр"		, 2);

мСтруктураНачальныхНастроек.Вставить("ПечататьСправку"             		, Ложь);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровСправка"		, 2);

мСтруктураНачальныхНастроек.Вставить("ПечататьСправкуВнутр"             , Ложь);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровСправкаВнутр", 2);

мСтруктураНачальныхНастроек.Вставить("ПечататьСертификаты"              , Ложь);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровСертификаты"	, 2);

мСтруктураНачальныхНастроек.Вставить("ПечататьНаПринтер"                , Ложь);
мСтруктураНачальныхНастроек.Вставить("Принтер"                			, "");

