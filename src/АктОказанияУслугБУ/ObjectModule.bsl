Перем мВалютаРегламентированногоУчета;

// Внешняя функция печати
// КТ-2000: (095)789-3070
// Параметры
//  ИмяМакета  – Строка – имя формы печати
//
// Возвращаемое значение:
//   Булево   –Печать прошла успешно - Истина, иначе - Ложь
//
Функция Печать(ИмяМакета = "", ПараметрыПечати = Неопределено)	Экспорт

	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
//	Если Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(СсылкаНаОбъект.Проведен) Тогда
//		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
//		Возврат Ложь;
//	КонецЕсли;
	
	ТабДокумент = ПечатьДокумента(СсылкаНаОбъект);
	
	//Определим параметры печати
	Если ПараметрыПечати <> Неопределено Тогда
		КоличествоЭкземпляров = 1;
		Если НЕ(ПараметрыПечати.Свойство("КоличествоЭкземпляров",КоличествоЭкземпляров)) Тогда
			КоличествоЭкземпляров = 1;			
		КонецЕсли;
		НаПринтер = Ложь;
		Если НЕ(ПараметрыПечати.Свойство("НаПринтер",НаПринтер)) Тогда
			НаПринтер = Ложь;			
		КонецЕсли;
	КонецЕсли;
	Если КоличествоЭкземпляров = Неопределено Тогда
		КоличествоЭкземпляров = 1;
	КонецЕсли;
	Если НаПринтер = Неопределено Тогда
		НаПринтер = Ложь;
	КонецЕсли;
//---КТ-2000-(095)789-3070---Олег-27.06.05
	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ВыбОбъект));
	Возврат ТабДокумент;
//---КТ-2000-(095)789-3070---Олег-27.06.05

КонецФункции // Печать()

Функция СформироватьСтруктуруПодписейДляПечати( Руководители, СсылкаНаДокумент, ВозвращаемаяСтруктура = Неопределено)
	
	Если ВозвращаемаяСтруктура = Неопределено Тогда 
		ВозвращаемаяСтруктура = Новый Структура;
	КонецЕсли;
	//KAV Добавим вывод исполнителя
	Рез=РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(СсылкаНаДокумент.Дата,Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",СсылкаНаДокумент.Организация,Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель));
	Если Рез.Количество()>0 Тогда
		ДанныеФизическогоЛица = ОбщегоНазначения.ДанныеФизЛица(СсылкаНаДокумент.Организация, Рез[0].ФизическоеЛицо, СсылкаНаДокумент.Дата);
		ФИОРуководителя = ДанныеФизическогоЛица.Представление;
		ВозвращаемаяСтруктура.Вставить("Руководитель",          Рез[0].ФизическоеЛицо);
		ВозвращаемаяСтруктура.Вставить("ФИОРуководителя",		ФИОРуководителя);
		ВозвращаемаяСтруктура.Вставить("ДолжностьРуководителя", "" + Рез[0].Должность+?(ЗначениеЗаполнено(Рез[0].Приказ),"("+Рез[0].Приказ+")",""));
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаДокумент.Руководитель) И Руководители.Руководитель <> СсылкаНаДокумент.Руководитель Тогда
		ДанныеФизическогоЛица = ОбщегоНазначения.ДанныеФизЛица(СсылкаНаДокумент.Организация, СсылкаНаДокумент.Руководитель, СсылкаНаДокумент.Дата);
		ФИОРуководителя = ДанныеФизическогоЛица.Представление + " " + СсылкаНаДокумент.ЗаРуководителяПоПриказу;
		ВозвращаемаяСтруктура.Вставить("Руководитель",          СсылкаНаДокумент.Руководитель);
		ВозвращаемаяСтруктура.Вставить("ФИОРуководителя",		ФИОРуководителя);
		ВозвращаемаяСтруктура.Вставить("ДолжностьРуководителя", "" + ДанныеФизическогоЛица.Должность);
	Иначе
		ВозвращаемаяСтруктура.Вставить("Руководитель",          Руководители.Руководитель);
		ВозвращаемаяСтруктура.Вставить("ФИОРуководителя",       Руководители.РуководительПредставление);
		ВозвращаемаяСтруктура.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент.ГлавныйБухгалтер) Тогда
		ДанныеФизическогоЛица = ОбщегоНазначения.ДанныеФизЛица(СсылкаНаДокумент.Организация, СсылкаНаДокумент.ГлавныйБухгалтер, СсылкаНаДокумент.Дата);
		ФИОГлавБух = ДанныеФизическогоЛица.Представление + " " + СсылкаНаДокумент.ЗаГлавногоБухгалтераПоПриказу;
		ВозвращаемаяСтруктура.Вставить("ГлавныйБухгалтер",      СсылкаНаДокумент.ГлавныйБухгалтер);
		ВозвращаемаяСтруктура.Вставить("ФИОГлавБухгалтера",		ФИОГлавБух);
	Иначе
		ВозвращаемаяСтруктура.Вставить("ГлавныйБухгалтер",      Руководители.ГлавныйБухгалтер);
		ВозвращаемаяСтруктура.Вставить("ФИОГлавБухгалтера",     Руководители.ГлавныйБухгалтерПредставление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент.ОтпускПроизвел) Тогда
		ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(СсылкаНаДокумент.Организация, СсылкаНаДокумент.ОтпускПроизвел, СсылкаНаДокумент.Дата);
		ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", ДанныеПодотчетногоЛица.Представление);
		Если ДанныеПодотчетногоЛица.Должность <> Null Тогда 
			ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", ДанныеПодотчетногоЛица.Должность.Наименование);
		Иначе 
			ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", "");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаДокумент.Склад) Тогда
		Срез = РегистрыСведений.ОтветственныеЛица.СрезПоследних(СсылкаНаДокумент.Дата, Новый Структура("СтруктурнаяЕдиница", СсылкаНаДокумент.Склад));
		Если Срез.Количество() > 0 Тогда
			ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(СсылкаНаДокумент.Организация, Срез[0].ФизическоеЛицо, СсылкаНаДокумент.Дата);
			ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", "" + ДанныеПодотчетногоЛица.Представление);
			ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", "" + ДанныеПодотчетногоЛица.Должность);
		Иначе 
			ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", "");
			ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", "");
		КонецЕсли;
	Иначе 
		ВозвращаемаяСтруктура.Вставить("ФИОКладовщика", "");
		ВозвращаемаяСтруктура.Вставить("ДолжностьКладовщика", "");
	КонецЕсли;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции	

Функция ПодготовитьДанныеДляПечатиАктаОбОказанииУслуг(СсылкаНаДокумент) Экспорт
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	// {ОбособленныеПодразделения
	|	ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	// }ОбособленныеПодразделения
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВалютаДокумента.Код КАК ВалютаДокументаКод,
	|	БанковскийСчетОрганизации КАК БанковскийСчет
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	ТаблицаШапки = ЗапросШапка.Выполнить().Выгрузить();
	Если ТаблицаШапки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Шапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаШапки[0]);
	КонецЕсли;

	ПодразделениеОтветственныхЛиц = Неопределено;
	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = СсылкаНаДокумент.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(СсылкаНаДокумент.Организация, СсылкаНаДокумент.Дата, ПодразделениеОтветственныхЛиц);
	СформироватьСтруктуруПодписейДляПечати(Руководители, СсылкаНаДокумент, Шапка);
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", СсылкаНаДокумент.Ссылка);
	ЗапросУслуги.УстановитьПараметр("Кратность",       ЗаполнениеДокументов.КратностьДокумента(СсылкаНаДокумент, мВалютаРегламентированногоУчета));
	Если СсылкаНаДокумент.ВалютаДокумента = мВалютаРегламентированногоУчета
		Или Не СсылкаНаДокумент.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ЗапросУслуги.УстановитьПараметр("Курс", 1);
		ВалютаВПодписи = СсылкаНаДокумент.ВалютаДокумента;
	Иначе
		ЗапросУслуги.УстановитьПараметр("Курс", ЗаполнениеДокументов.КурсДокумента(СсылкаНаДокумент,      мВалютаРегламентированногоУчета));
		ВалютаВПодписи = мВалютаРегламентированногоУчета;
	КонецЕсли;
 	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	ОбщаяТаблица.Номенклатура,
	|	ОбщаяТаблица.Товар,
	|	ОбщаяТаблица.КодАртикул,
	|	ОбщаяТаблица.Количество,
	|	ОбщаяТаблица.ЕдиницаИзмерения,
	|	ОбщаяТаблица.Цена,
	|	ОбщаяТаблица.Сумма,
	|	ОбщаяТаблица.СтавкаНДС,
	|	ОбщаяТаблица.СуммаНДС,
	|	ОбщаяТаблица.НомерСтроки,
	|	ОбщаяТаблица.НомерТабличнойЧасти,
	|	ОбщаяТаблица.ИмяТабличнойЧасти
	|ИЗ
	|(ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	Сумма * &Курс / &Кратность КАК Сумма,
	|	СтавкаНДС,
	|	СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	НомерСтроки,
	|	1 КАК НомерТабличнойЧасти,
	|	""Товары"" КАК ИмяТабличнойЧасти
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	Сумма * &Курс / &Кратность КАК Сумма,
	|	СтавкаНДС,
	|	СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	НомерСтроки,
	|	2 КАК НомерТабличнойЧасти,
	|	""Услуги"" КАК ИмяТабличнойЧасти
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,	
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	Сумма * &Курс / &Кратность КАК Сумма,
	|	СтавкаНДС,
	|	СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	НомерСтроки,
	|	3 КАК НомерТабличнойЧасти,
	|	""Агентские услуги"" КАК ИмяТабличнойЧасти
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент) КАК ОбщаяТаблица
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабличнойЧасти, НомерСтроки";
	
	ТабличнаяЧасть = ЗапросУслуги.Выполнить().Выгрузить();
	
	Если СсылкаНаДокумент.Проведен И (Шапка.РасчетыВУсловныхЕдиницах
		И (Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета И СсылкаНаДокумент.Дата >= '20090101000000')) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
		Запрос.УстановитьПараметр("Содержание", "Реализация услуг");
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", СсылкаНаДокумент.СчетУчетаРасчетовСКонтрагентом);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугУслуги.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|			ГДЕ
		|				РеализацияТоваровУслугУслуги.Ссылка = &Ссылка)
		|			И Хозрасчетный.Содержание = &Содержание
		|";
		Запрос.Текст = Текст;
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.Дата);
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
			
			ТабличнаяЧасть.Колонки.Добавить("СуммаБезНДС");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ТабличнаяЧасть Цикл
				
				СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
				СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;

				МассивРаспределения.Добавить(СуммаСНДС);
				СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			    				
			КонецЦикла;
			
			ТабличнаяЧасть.Колонки.Добавить("СуммаРублевая");
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ТабличнаяЧасть, "СуммаРублевая");
			
			Для Каждого СтрокаТовар Из ТабличнаяЧасть Цикл
				
				Если РасчетСуммыНДСПоСтавке Тогда
					//Выделение суммы НДС, Расчет суммы без НДС
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
					
					СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					
				Иначе
					МассивРаспределения.Очистить();
					МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
					МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
					МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
					Если МассивРаспределенныхСумм <> Неопределено Тогда
						СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
						СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					КонецЕсли;
				КонецЕсли;
				
				Если Шапка.СуммаВключаетНДС Тогда
					СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Шапка", Шапка);
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
	ДанныеДляПечати.Вставить("ВыводитьКоды", ВыводитьКоды);
	ДанныеДляПечати.Вставить("ТекстКодАртикул", ТекстКодАртикул);
	ДанныеДляПечати.Вставить("ВалютаВПодписи", ВалютаВПодписи);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Функция формирует табличный документ с печатной формой акта об оказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьДокумента(СсылкаНаДокумент)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиАктаОбОказанииУслуг(СсылкаНаДокумент);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Шапка          = ДанныеДляПечати.Шапка;
	ТабличнаяЧасть = ДанныеДляПечати.ТабличнаяЧасть;
	
	Если ДанныеДляПечати.ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Макет");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ДанныеДляПечати.ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ДанныеДляПечати.ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
        ОбластьМакета.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
		
		Если Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбластьМакета.Параметры.Цена  = СтрокаТабличнойЧасти.Сумма / ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ТабличнаяЧасть <> Неопределено Тогда

		Сумма    = ТабличнаяЧасть.Итог("Сумма");
		СуммаНДС = ТабличнаяЧасть.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		Если СуммаНДС <> 0 Тогда
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			ОбластьМакета.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, ДанныеДляПечати.ВалютаВПодписи);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеДляПечати.ВалютаВПодписи);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации = "" + Шапка.ДолжностьРуководителя + " " + ПредставлениеПоставщика;
	
	ОбластьМакета.Параметры.ЗаместительПоПриказу = Шапка.ФИОРуководителя;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

мВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
